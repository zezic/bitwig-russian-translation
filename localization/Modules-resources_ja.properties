#i/o.
i/o.signal_in.desc=送信信号です。
i/o.out.desc=受信信号です。
i/o.chooser.desc=使用する信号パスです。
i/o.affect_lifetime.desc=デバイスがポリフォニック対応の場合、このモジュールが有効の間、ボイスは保持されます。
i/o.smoothing.desc=この信号に滑らかさを適用します。
i/o.cv_mode.title=モード [AC または DC]
i/o.cv_mode.desc=オーディオインターフェイスの仕様: 直流 (DC) または交流 (AC) に合わせて設定をします。
i/o.cv_smooth.desc=信号を滑らかにするための平均化時間です。
i/o.cv_smooth_filt.desc=受信されたCV信号に適用する4ポールローパスフィルターのカットオフ周波数です。
i/o.cv_gain.desc=受信したCV信号に適用するゲインです。

gate_in.out.desc=このデバイスで受信したノートゲート信号です。
phase_in.out.desc=デバイスによって構成されたフェイズ信号です。
phase_in.note.title=メモ: 設定はデバイスインスペクターでおこないます。
phase_in.note.desc=この信号に関する設定はすべてデバイスのインスペクターパネルの \n"Ø デバイスフェイズ" セクションでおこないます。
pitch_in.out.desc=このデバイスで受信したノートピッチ信号です。
pitch_in.note_priority.desc=優先するノートピッチ適用方法です。最大または最小 (ピッチ) のノート、最後に演奏した (時間) ノート、あるいはデバイスの現在設定 (デフォルト) を使用します。
pitch_in.note_priority_curr.title=現在のノートプライオリティ
pitch_in.note_priority_curr.desc=デフォルト以外のノートプライオリティ設定を示します。
velocity_in.out.desc=デバイスが受信したノートベロシティ信号です。
gain_in.out.desc=デバイスが受信したノートゲインエクスプレッション信号です。
pan_in.out.desc=デバイスが受信したノートパンエクスプレッション信号です。
pressure_in.out.desc=デバイスが受信した単極 (ユニポーラー) のポリプレッシャー信号です。(チャンネルアフタータッチを受信した場合は全ボイスに適用されます)
timbre_in.out.desc=デバイスが受信した双極 (バイポーラー) のティンバーエクスプレッション信号です。
timbre_in.relative.desc=ノート開始から現在の信号をゼロ値にオフセットします。
audio_in.out.desc=デバイスのオーディオ入力バスで受信した信号です。
audio_out.in.desc=デバイスのオーディオバスから送信出力された信号です。
audio_out.threshold.desc=信号が有効かどうかを判断するためのスレッショルドレベルです。
audio_out.timeout.desc=信号が有効かどうかを判断するためのタイムアウト設定です。
audio_out.clipping.title=出力クリッピングモード [オフ、ハード、ソフト]
audio_out.clipping.desc=オーディオ出力に適用するクリンピング処理の種類です。
audio_sidechain.out.desc=選択したプロジェクトパスからのオーディオ信号です。
audio_sidechain.path.title=オーディオパス
audio_sidechain.path.desc=使用するプロジェクトパスです。
hw_in.out.desc=選択した外部パスからのオーディオ信号です。
hw_in.path.title=オーディオパス
hw_in.path.desc=使用する入力オーディオハードウェアパスです。
hw_out.in.desc=選択した外部パスに送信する信号です。
hw_out.path.title=オーディオパス
hw_out.path.desc=使用する出力オーディオハードウェアパスです。
cv_in.out.desc=選択した外部パスからのCV (コントロールボルテージ/制御電圧) 信号です。
cv_in.path.title=コントロールボルテージパス
cv_in.path.desc=使用する受信CVパスです。
cv_out.in.desc=選択した外部CV出力バスに送る信号です。
cv_out.path.title=コントロールボルテージパス
cv_out.path.desc=使用する出力CVパスです。
cv_pitch_out.in.desc=選択した外部CV出力ピッチバスに送る信号です。
cv_pitch_out.path.title=コントロールボルテージピッチパス
cv_pitch_out.path.desc=使用する出力CVピッチパスです。
cv_pitch_out.range.desc=受信信号がスケールされるオクターブ範囲です。
cv_pitch_out.root.desc=ゼロ値でトリガーするノートです。
key_on.out.desc=特定のノートとチャンネルの受信ノートゲート信号です。
key_on.note.desc=ゲート信号を供給するノートです。
key_on.channel.desc=ノートがテストされるチャンネルです。 ('0'で全チャンネルに設定)
key_on.learn.desc=クリックをすることで、次の受信ノートに基づいて、そのノートとチャンネルパラメーターを設定します。
keys_held.out.desc=デバイス入力の現在有効なキー数です。
transport_playing.out.desc=アプリケーションのトランスポート再生時は高ロジック状態、停止時は低ロジック状態にします。
modulator_out.in.desc=モジュレーターで使用する信号です。 \n\nメモ: モジュレーターの信号はアプリケーションのサンプルレートで処理され、モノラルの信号として扱われます。(ステレオ信号はモノラルサミングされます)
modulator_out.modulator.title=モジュレーション出力
modulator_out.modulator.desc=ワイヤレスコントロールのパラメーターです。


#display.
display.signal_in.desc=表示される信号です。
display.signal_in1.desc=1の表示信号です。
display.signal_in2.desc=2の表示信号です。
display.signal_in3.desc=3の表示信号です。
display.signal_in4.desc=4の表示信号です。
display.signal_out1.desc=入力から変更なしで通過した信号出力1です。
display.signal_out2.desc=入力から変更なしで通過した信号出力2です。
display.out.desc=入力から変更なしで通過した信号出力です。

comment.comment.title=コメント表示 [テキスト]
comment.comment.desc=インスペクターパネルで入力したコメントを表示します。
comment.title.title=タイトル表示 [テキスト]
comment.title.desc=モジュール名です。(インスペクターパネルで) ユーザー定義した場合、モジュール色で表示されます。
comment.entry.title=コメント入力エリア [テキスト]
comment.entry.desc=コメント表示の内容を入力する箇所です。
label.label.title=ラベル表示 [テキスト]
label.label.desc=モジュール名 (インスペクターパネルで設定)です。モジュール色で表示されます。
xy.x_out.desc=Xポジションを示す信号です。
xy.y_out.desc=Yポジションを示す信号です。
xy.pad.title=XYコントロールパッド [インターフェイス]
xy.pad.desc=クリックまたはタッチ1つで、XYの両方を同時に動かします。
xy.x_value.desc=現在のX値です。 (モジュレーターを割当てる際にも便利です)
xy.y_value.desc=現在のY値です。 (モジュレーターを割当てる際にも便利です)
xy.x_bipolar.title=Xバイポーラー [切替]
xy.x_bipolar.desc=X軸の範囲: '-1' ~ '+1' を設定します。
xy.y_bipolar.title=Yバイポーラー [切替]
xy.y_bipolar.desc=y軸の範囲: '-1' ~ '+1' を設定します。
oscilloscope.trigger_in.desc=[スローまたはファーストモード時] \nトリガーをすることでモジュールのトレースをクリアして再描画します。
oscilloscope.mode.title=モード [スロー、ファースト、ピッチ]
oscilloscope.mode.desc=トラッキング速度をスローまたはファーストモード、あるいはデバイスが受信したノートピッチ信号に追従するかを設定します。
oscilloscope.display.title=ボイス表示 [ラストまたはオールボイス]
oscilloscope.display.desc=各信号の最終ボイスまたは全ボイスの合計 (簡単の範囲外になります) のいずれかを表示します。
value_readout.mode.title=表示単位 [1、dB、st、Hz]
value_readout.mode.desc=信号の表示単位を設定します。生信号値 (1)、デシベルレベル (dB)、ノートピッチとセミトーン (st)、ノートピッチと周波数ヘルツ (Hz) から選択します。


#phase.
phase.phase_in.desc=フェイズ処理のための入力信号です。
phase.step_in.desc=トリガーをして次のステップに進みます。
phase.reset_in.desc=トリガーをして、次のクロックトリガーが到達した際のステップ1リセットをします。
phase.pitch_in.desc=フェイズアウトの生成に使用するピッチ信号入力です。 \n\n値例: \n• 任意のC入力 → '0.000'を出力 \n• 任意のF♯/G♭入力 → '0.500'を出力 \n• A♯/B入力 → '0.999'を出力
phase.out.desc=フェイズ信号出力
phase.gate_out.desc=フェイズランプの頭半周期の高ロジック ('+1') となるゲート信号です。

ø_reverse.stereo-ness.desc=フェイズリバースするチェンネルです:
ø_bend.amount.desc=曲線係数を使用します。'0 %'は変化無し、正数値は対数曲線、負数値は指数曲線になります。
ø_pinch.amount.desc=S字曲線係数を使用します。'0 %'は変化無し、正数値はS字型の対数曲線、負数値はS字型の指数曲線になります。
ø_reset.logic_in.desc=トリガーをすることで信号入力をゼロにシフトします。
ø_reset.reset_pre-cord.desc=デバイスのノートゲート信号をリセット入力に接続するプリコードです。
ø_scaler.logic_in.desc=トリガーをして処理をリセットします。
ø_scaler.rate.desc=フェイズレートのスケール設定です。'1.0' (100%) は変化なしを示し、'2.0'は2倍速く、'0.33'はおよそ1/3遅くします。
ø_scaler.ratio.title=スケーリングレシオ [0 ~ 99 : 1 ~ 99]
ø_scaler.ratio.desc=モジュールのレートを分子と分母の設定でスケールします。 \n\n設定例: \n• '1:1'は変化なし \n• '6:1'は6倍 (600%) 速く \n• '1:4'は25%に減速 (1/4速度、または) slows down to 25% (4回の入力信号ごとに1つのフェイズランプ) \n• '0:x'は比率ゼロを出力
ø_counter.step_count.desc=進むためのステップ数です。
ø_formant.amount.desc=フォルマントシフトの適用量です。
ø_lag.amount.desc=現在のフェイズ入力レベルに達する前の時間です。
ø_mirror.amount.desc=シフトしてからフェイズ入力に反映する量です。
ø_shift.amount.desc=フェイズ入力のオフセット割合です。正数値は信号タイミングを遅く、負数値は早くなります。
ø_sinemod.depth.desc=サインもジュレーター信号のアンプリチュードです。
ø_sinemod.cycles.desc=サインもジュレーター信号の周期数です。
ø_sinemod.add.desc=入力信号をモジュレーションされた信号に追加します。
ø_skew.amount.desc='+0.5'に再マッピングされる受信信号レベルです。
ø_sync.amount.desc=シフトしてからフェイズ入力をワープする量です。
ø_split.phase_in.desc=信号入力を連続した出力ポート間にオフセットします。 \n\n例えば、出力ポート'2'は、50 % (180 º) にシフトされた信号を二番目のポートに送ります。そして出力ポート'5'は、20 % (72 º) にシフトされた信号を二番目のポート、40 % (144 º) は三番目のポートに送信します。
ø_split.out1.desc=フェイズ信号出力1、元の入力と同一です。
ø_split.out2and.desc=フェイズ信号出力2、などです。


#data.
data.phase_in.desc=モジュールデーターのルックアップを実行します。
data.logic_out.desc=現在のフェイズポジションに基づくゲート信号出力です。
data.pitch_out.desc=現在のフェイズポジションに基づくピッチ信号出力です。
data.out.desc=現在のフェイズポジションに基づく信号出力です。
data.phase_track.desc=デバイスフェイズ (と任意の受信されたフェイズ信号) でモジュールのフェイズをドライブに使用するプリコードです。
data.step_count.desc=ステップ数です。
data.sharpness.desc=(平均化さたものとは対照的な) 波形の精度です。
data.modulator.title=モジュレーション出力
data.modulator.desc=ワイヤレスコントロールのパラメーター用です。

gates.steps.title=ステップ [切替]
gates.steps.desc=使用可能なステップを切り替えます。
gates.mode.title=出力モード [T (トリガー) または G (ゲート)]
gates.mode.desc=有効された各々のステップに対して、長さ50% (トリガー)、あるいはタイを有効にした連続ステップの長さ100% (ゲート)のいずれかでゲート信号を送ります。
pitches.steps.title=ステップ [ピッチスライダー]
pitches.steps.desc=有効の各ステップに対する1つのピッチスライダーです。それぞれのC (上中下段) は明るい枠で示されます。背景色で自然ノート (灰) と臨時ノート (黒) の識別をします。 \n\n[SHIFT]キーを押さえたままピッチスライダーのクリック&ドラッグをした場合、セミトーンの吸着は無効となり、マイクロピッチが可能にします。
pitches.offset.desc=ステップ表示のオクターブオフセットです。'0'はミドルCを中央に、'+1'に設定した場合は1オクターブ上にシフトします。
pitches.octaves.desc=モジュール上で一度に表示されるノート範囲です。
steps.steps.title=ステップ [スライダー]
steps.steps.desc=有効の各ステップに対する1つのバリュースライダーです。
steps.bipolar.desc=ステップごとに '-1' ~ '+1'の範囲で設定をします。
steps.interpolation.desc=(設定値の出力だけではなく)フェイズ入力に基づく隣接値をクロスフェードします。
probabilities.logic_out.desc=ステップの現在のフェイズポジションの確率に基づくゲート信号出力です。
probabilities.steps.title=ステップ [スライダー]
probabilities.steps.desc=有効の各ステップに対する1つの確率スライダーです。'100 %'に設定した場合、そのステップは常にトリガーされ、'0 %'は全くトリガーされず、'50 %'の場合、トリガーされる確率は半分になります。
ø_pulse.pw.desc=パルス波の各周期が負の状態になる確率です。
array_module.read_in.desc=出力に送られるポジションです。
array_module.write_in.desc=書き込み可能なポジションです。
array_module.value_in.desc=キャプチャーされる信号です。
array_module.gate_in.desc=コピーした値を書き込みポジションにトリガーします。
array_module.size.desc=アレイで使用する長さ (アドレス数) です。
array_module.normalize.desc=ポートの読取と書込みに正のフェイズ信号 ('0' ~ ほぼ '+1') を使用します。 \n\nそれ以外の場合は ('0' ~ ほぼアレイのサイズ値までの範囲の) "インデックス" 値が予想されます。


#oscillator.
oscillator.gate_in.desc=トリガーでオシレーターのフェイズを再スタートさせます。
oscillator.reset_pre-cord.desc=デバイスのノートゲート信号と再トリガー入力を接続するプリコードです。
oscillator.phase_in.desc=オシレーターフェイズのオフセットです。
oscillator.pitch_in.desc=ピッチバスに追加するコントロール入力です。
oscillator.out.desc=信号出力です。
oscillator.keytrack.desc=デバイスのピッチ信号とモジュールのピッチバスを接続するプリコードです。
oscillator.ratio.title=ピッチレシオ [0 ~ 99 : 1 ~ 99]
oscillator.ratio.desc=モジュールのピッチを分子と分母の設定でスケールします。 \n\n設定例: \n• '1:1'は変化無しを示します。'2:2'、'7:7'なども同様です。 \n• '6:1'は6に倍算します。(600%) \n• '1:4'は25%にスケールダウンします。(2オクターブ下)  \n• '4:3' はおそよ133%になります。(純正律で全4度上) \n• '0:x'の場合、ピッチバスにゼロを出力して周波数オフセットのコントロールのみに使用します。
oscillator.pitch_shift.desc=モジュールのピッチをシフトします。
oscillator.stereo-ize.desc=右チャンネルに逆の周波数オフセットを適用します。
oscillator.frequency_shift.desc=モジュールの周波数をシフトします。
oscillator.phase_mod_embed.desc=サブオシレーターからのフェイズモジュレーションの深さです。
oscillator.reset_pre-cord_embed.desc=各ノートのオシレーターを際トリガーするプリコードです。
oscillator.reset_sub_embed.title=サブで再トリガー [切替]
oscillator.reset_sub_embed.desc=サブオシレーターの出力でオシレーターを再トリガーするプリコードです。 \n\nメモ: この切替は上のPolymerのインターフェイス自体にあります。

pulse.pw.desc=パルス波の各周期を正方向に保つ割合です。
pulse.sync.desc=ティンバーシフトのためのルート波形ピッチのセミトーンオフセットです。
saw.shape.desc=ノコギリ波の下降をわずかに上または下に曲げます。
saw.sync.desc=ティンバーシフトのためのルート波形ピッチのセミトーンオフセットです。
sine.skew.desc=波形を傾けて、サイン波から捻られたノコギリまたはランプ波形に変形させます。
sine.fold.desc=波形を折り返して追加周期を作成します。
triangle.skew.desc=波形を傾けて、伝統的な三角波から捻られたノコギリまたはランプ波形に変形させます。
triangle.fold.desc=波形を折り返して追加周期を作成します。
wavetable.display.title=ウェーブテーブル表示
wavetable.display.desc=現在読み込まれているウェーブテーブルとテーブルインデックス値による現在のポジションを示します。クリックをすることでウェーブテーブルブラウザーが呼び出されます。 \n\nWTウェーブテーブルファイル (あるいはSerum- もしくは WaveEdit- 対応ファイル) を画面表示にドラッグよることで読み込まれます。 
wavetable.index.desc=現在再生中のテーブルです。使用可能なテーブルから補間されます。
wavetable.index_in.desc=インデックスに追加するコントロール入力です。
wavetable.unison_voices.desc=ユニゾンモードのボイス数、もしくは "オフ"を設定します。
wavetable.unison_mode.title=ユニゾンモード [様々な選択肢]
wavetable.unison_mode.desc=使用するユニゾンモードです:
wavetable.unison_detune.desc=全ユニゾンボイスの広がりに使用する単極仕様の幅設定です。
wavetable.unison_spread.desc=ユニゾンボイスのステレオ幅です。
wavetable.show_unison.title=ユニゾン設定表示
wavetable.show_unison.desc=ユニゾンパラメーターをモジュールに表示します。
wavetable.unison_section.title=ユニゾンパラメーター [種々]
wavetable.unison_section.desc=詳細については以下のインスペクターセクションを参照します。
wavetable.no_interpolation.title=インデックスインターポレーション無効 [切替]
wavetable.no_interpolation.desc=有効にした場合、(テーブル間の自由なクロスフェードをする代わりに) 読み込まれたファイルのテーブルのみを使用します。
wavetable.phase_distribution.title=ハーモニックフェイズ [様々な選択肢]
wavetable.phase_distribution.desc=各倍音のフェイズ処理方法です:
wavetable.spread_with_unison.title=ユニゾンフェイズスプレッド [切替]
wavetable.spread_with_unison.desc=ユニゾンボイスごとに異なるフェイズオフセットを与え、不要な脈動を減らし滑らかなユニゾンサウンドをもたらします。
sub.waveshape.desc=ここから出力波形を選択します:
sub.octave.desc=オクターブによるピッチディチューン設定です:
phase-1.algorithm.title=アルゴリズム [様々なシェイプ]
phase-1.algorithm.desc=シェイプ設定で使用する波形を定義します:
phase-1.shape.desc=現在のアルゴリズム波形を定義します。
phase-1.formant.title=フォルマント [倍音1 (基音) ~ 9]
phase-1.formant.desc=波形に追加のサイン周期として挿入される倍音です。
phase-1.feedback.desc=フェイズモジュレーションに使用する出力信号のフィードバック量です。
swarm.spread.desc=ディチューンの適用幅です。
swarm.skirt.desc=ディチューン分布のファインチューニングです。
swarm.wave.title=波形 [様々な波形]
swarm.wave.desc=各スワームボイスに使用する波形です。
sampler.gate_in.desc=選択サンプルの再生のトリガー/リトリガーをします。 \nデバイスのノートゲート信号を接続するプリコードです。
sampler.pitch_in.desc=ピッチバスに追加する (とマルチサンプルモードのサンプル選択用の) コントロール入力です。\nデバイスのノートゲート信号を接続するプリコードです。
sampler.velocity_in.desc=[マルチサンプルモード] サンプル選択をするベロシティ信号です。\nデバイスのノートベロシティ信号を接続するプリコードです。 \n\nメモ: このモジュールの全ての入力はモノラルで扱われます。
sampler.zparams.title=ゾーンパラメーター 1、2、3
sampler.zparams.desc=[マルチサンプルモード]現在トリガーされているゾーンのパラメーター値です。
sampler.select.desc=[マルチサンプルモード] 選択範囲に基づくトリガーゾーンを定義します。
sampler.pitch.desc=再生周波数コントロールです。(サンプル選択には影響しません)
sampler.play_mode.title=再生モード
sampler.play_mode.desc=オーディオ再生/コントロール方法です:\nRepitch → スピードコントロールを持つ通常のサンプラー再生モード\nCycles → ウェーブテーブルのように波形周期をソースにしたモード\nTextures → サンプルピッチを保持したグラニュラ再生モード\n
sampler.speed.desc=再生スピードをコントロールします。(リピッチモードでは、音程に影響します)
sampler.formant.desc=[サイクルモード] ティンバーコントロールとしてのフォルマントシフトです。 
sampler.grain.desc=[テクスチャーモード] 各オーディオグレインの長さです。
sampler.motion.desc=[テクスチャーモード] 再生ヘッドに追加するアニメーション量です。
sampler.freeze.desc=再生ヘッドを所定の位置保持します。ポジションモジュレーションによるコントロールが必要です。
sampler.ram.title=RAMに読込 [切替]
sampler.ram.desc=再生ヘッド/ループモジュレーションを可能にします。
sampler.playhead.desc=再生ヘッドの現在ポジションをオフセットします。
sampler.position.desc=サンプルのスタートとエンドマーカー間をスケールします。
sampler.loop_start.desc=ループポジションの相対的にオフセットします。
sampler.loop_length.desc=ループエンドタイムをスケールします。
sampler.zone_area.title=ゾーンコントロール
sampler.zone_area.desc=読み込まれたサンプル固有のコントロールです。


#random.
random.trigger_in.desc=トリガーによって出力時に新しいランダム値が発生します。
random.trigger_pre-cord.desc=デバイスのノートゲート信号をトリガー入力に接続するプリコードです。ノート演奏ごとにランダム出力更新の発生をもたらします。
random.chance_in.desc=チャンスパラメーターを直接設定します。
random.out.desc=ランダム信号出力
random.chance.desc=受信トリガーがトリガー出力を生み出す可能性です。
random.stereo.desc=左右チャンネル対して、独立した値を生成します。

noise.type.title=ノイズタイプ [ホワイトまたはピンク]
noise.type.desc=ランダム分布 (ノイズ) の種類: ホワイト (全周波数均一のエネルギー) とピンク (オクターブ帯域ごとに均一のエネルギー)のいずれかを選択します。
s/h_lfo.smoothing.desc=補間適用量です。
s/h_lfo.feedback.desc=連続した出力値の相関です。正数値設定の場合は時間経過に沿った小さな変化 (ブラウンモーション) 傾向にあり、負数値設定はパターンリピートを誘導します。
s/h_lfo.epoch.desc=フィードバックループで使用するシーケンスの長さ (ステップ数) です。
chance.trigger_in.desc=トリガーによって出力時に可能性のあるイベントが発生します。
chance.out.desc=ショートトリガー信号です。
dice.out.desc=ランダムユニポーラー (単極) 値です。


#lfo.
lfo.gate_in.desc=トリガーによってLFOのフェイズを再スタートします。
lfo.phase_in.desc=LFOフェイズをオフセットします。
lfo.rate_in.desc=レートバスに追加するコントロール入力です。
lfo.out.desc=信号出力です。
lfo.logic_out.desc=周期前半を高ロジック、後半を低ロジックとします。
lfo.modulator.title=モジュレーション出力
lfo.modulator.desc=ワイヤレスコントロールのパラメーター用です。
lfo.waveshape.title=波形 [三角、 パルス、サイン、ノコギリ]
lfo.waveshape.desc=ベース波形の選択です。スキューパラメーターでさらに変形します。
lfo.skew.desc=波形変動量です。
lfo.rate.desc=現在のタイムベースの周波数です。
lfo.timebase.title=タイムベース [周波数またはノート長]
lfo.timebase.desc=レートに使用する単位です。
lfo.phase_all.desc=モジュールのフェイズをシフトします。
lfo.phase_offset.desc=右チャンネルのフェイズを相対的にシフトします。
lfo.bipolar.desc=モジュールの出力をおよそ '-1' ~ '+1' にスケールします。

clock.rate.desc=ヘルツ単位のレートです。
transport.timebase.title=タイムベーシ [小節または拍長]
transport.timebase.desc=レートで使用する単位です。
transport.length.desc=現在のタイムベースにおけるデバイスのフェイズ信号の波長です。
transport.offset.desc=タイムベース単位によるタイミングオフセットです。出力を早く (正数値) または遅く (負数値) します。
transport.shuffle.desc=トランスポートのグルーブ (有効時) をこのモジュールに適用します。
transport.free-run.desc=トランスポートの状態に関わらず、継続動作します。


#envelope.
envelope.signal_in.desc=エンベロープ信号によってスケールされる信号です。
envelope.signal_slope_in.desc=スケールされた信号です。
envelope.gate_in.desc=高ロジックはアタック段を始動し、低ロジックはリリースを始動します。
envelope.gate_pre-cord.desc=デバイスのノートゲート信号をゲート入力に接続するプリコードです。
envelope.trigger_in.desc=トリガーによってアタック段が始動します。\n
envelope.trigger_pre-cord.desc=デバイスのノートゲート信号をトリガー入力に接続するプリコードです。
envelope.signal_out.desc=エンベロープが適用された入力信号です。
envelope.signal_slope_out.desc=信号出力です。
envelope.env_out.desc=エンベロープ信号
envelope.modulator.title=モジュレーション出力
envelope.modulator.desc=ワイヤレスコントロールのパラメーターです。
envelope.attack.desc=現在のエンベロープ値から100%になるまでのライズタイムです。
envelope.decay.desc=アタック段後の立ち下がり時間です。
envelope.sustain.desc=ディケイ段終端のレベルです。
envelope.release.desc=現在のエンベロープ値から0%になるまでの立ち下がり時間です。
envelope.attack_curve.desc=アタック段の傾斜です。('0 %' = リニア設定)
envelope.decay_curve.desc=ディケイ段の傾斜です。('0 %' = リニア設定)
envelope.release_curve.desc=リリース段の傾斜です。('0 %' = リニア設定)
envelope.lifetime.desc=デバイスがポリフォニックの場合、このエンベロープジェネレーター動作している間、ボイスを維持します。

ad_module.looping.desc="トリガー" 入力が高いままである際は、常にエンベロープを再スタートします。
follower.signal_in.desc=エンベロープを抽出する信号です。
follower_rf.rise.desc=レベル増加のトランジションスピードです。
follower_rf.fall.desc=レベル減少のトランジションスピードです。
follower_rf.avg_mode.title=アベレージモード [ピークまたはRMS]
follower_rf.avg_mode.desc=ムービングアベレージの速度: ファーストとスローを切り替えます。
follower.time.desc=全レベル変化のトランジションスピードです。
follower.rms.desc=信号アベレージにRMSを使用した場合、信号ピークよりも(変化が)ゆっくりな音の"ボディ"を追従します。
slope_↗.time.desc=上昇信号変化のスルータイムです。
slope_↘︎.time.desc=下降信号変化のスルータイムです。


#filter.
filter.signal_in.desc=フィルター処理される信号です。
filter.cutoff_in.desc=カットオフバスに追加するコントロール入力です。
filter.out.desc=信号出力です。
filter.cutoff.desc=3dBのアッテネートが発生する周波数です。
filter.reso.desc=フィルター内に適用されるフィードバック量です。
filter.keytrack.desc=モジュールのカットオフバスに追加するデバイスのピッチ信号量です。
filter.slope.title=スロープ [種々]
filter.slope.desc=フィルターの鋭さ(dB/oct)です。
filter.poles.title=ポール [1ポールごとに -6 dB/oct]
filter.poles.desc=フィルターの鋭さです。
filter.linearity.title=リニアリティ [対称または非対称]
filter.linearity.desc=レゾナンスのレイン適用方法です
filter.enable_embed.title=フィルター有効 [切替]
filter.enable_embed.desc=無効にした場合、フィルターはバイパスされます。
filter.gain_embed.desc=フィルターの入力に適用するゲインです。
filter.feg_embed.desc=フィルタEGによるフィルター周波数モジュレーションの深さです。

svf.cutoff.desc=3dBのアッテネートが発生する周波数です。(あるいはバンドパスモードのセンター周波数です)
svf.mode.title=フィルターモード [ロー、バンド、ハイパス]
svf.mode.desc=使用するフィルターの種類です。
comb.cutoff.desc=3dBのアッテネートが発生する周波数です。
comb.reso.desc=フィルター内に適用されるフィードバック量です。
comb.feedback_invert.title=フィードバック極性 [ノーマルまたはインバート/反転]
comb.feedback_invert.desc=フィードバックスケールに使用するサインです。


#shaper.
shaper.signal_in.desc=シェイピングされる信号です。
shaper.out.desc=シェイピングされた信号出力です。

chebyshev.amount.desc=強調部の対象です。(例えば、設定値 '3.0' の場合、1オクターブと5度上を示します)
distortion.amount.desc=ゲインの適用量です。
quantizer.amount.desc=レベルとして使用されるアンプリチュードステップ設定です。
rectifier.positive_amount.desc=全正数値に使用するスケーリングです。
rectifier.negative_amount.desc=全負数値に使用するスケーリングです。
wavefolder.amount.desc=信号のフォルドバック前に適用するゲインです。
curve.low_out.desc=使用される最低出力レベルです。
curve.high_out.desc=使用される最高出力レベルです。
curve.curve.desc=曲線係数を使用します。'0 %'は変化無し、正数値は対数曲線、負数値は指数曲線になります。 


#delay.
delay.signal_in.desc=ディレイされる信号です。
delay.cutoff_in.desc=ディレイタイムバスに追加されるコントロール入力です。
delay.out.desc=ディレイ信号出力です。
delay.unit.title=ディレイ単位 [タイムまたはノート長]
delay.unit.desc=ディレイタイム設定に使用する単位です。
delay.time.desc=ディレイタイムのタイムベース設定です。
delay.beats.title=ディレイの拍数 [1 ~ 8]
delay.beats.desc=ディレイタイムに使用する拍数です。
delay.offset.desc=使用する拍単位をスケールします。イーブン、三連、付点値をクリック設定できます。
delay.feedback.desc=出力信号のフィードバック量です。
delay.low-pass.desc=フィードバック信号のローパスカットオフ周波数です。
delay.clipping.title=フィードバッククリッピングモード [ソフトまたはハード]
delay.clipping.desc=フィードバックループ内のクリッピングタイプです。

long_delay.out.desc=ディレイ信号出力です。 \n\nメモ: モジュール間のフィードバックループを作成するには、このモジュールを挿入します。フィードバック接続が可能になる特別な構成です。
all-pass.time.desc=ディレイタイムです。
all-pass.gain.desc=ゲイン補正量です。'100 %'設定は効果を取り消します。
recorder.signal_in.desc=レコードされる信号です。
recorder.record_in.desc=レコードが発生するかどうかを設定します。 \n\n注意: この入力ポートはモノです。
recorder.play_in.desc=再生が発生するかどうかを設定します。 \n\n注意: この入力ポートはモノです。


#mix.
mix.signal_in.desc=信号入力です。
mix.signal_in1.desc=信号入力1です。
mix.signal_in2.desc=信号入力2です。
mix.signal_in2and.desc=信号入力2などです。
mix.signal_out1.desc=信号出力1です。
mix.signal_out2.desc=信号出力2です。
mix.signal_out2and.desc=信号出力2などです。
mix.out.desc=信号出力です。

blend.mix.desc=入力1と2のバランスを比率で設定します。
blend.mode.title=ブレンドモード [イコールゲインまたはイコールパワー]
blend.mode.desc=2つの信号をクロスフェードする際に使用するパワールールです。
mixer.signal_in.desc=チャンネル1信号入力
mixer.signal_in2.desc=チャンネル2信号入力
mixer.signal_in3.desc=チャンネル3信号入力
mixer.signal_in4.desc=チャンネル4信号入力
mixer.signal_in5.desc=チャンネル5信号入力
mixer.signal_in6.desc=チャンネル6信号入力
mixer.volume.desc=チャンネル1のボリュームスケーリングです。
mixer.panning.desc=チャンネル1のステレオパンニングポジションです。
mixer.solo_mute.title=Ch 1 ソロ & 有効 [切替]
mixer.solo_mute.desc=チャンネル1をソロ (S) にします。そしてチャンネル1を可聴またはオフ(スピーカーアイコン)にします。
pan.placement.desc=入力信号ののステレオパンニングポジションです。
stereo_width.width.desc=入力信号の相対的な広がりです。 (設定値 '100 %' は変化無しです)
select.logic_in.desc=低い値は1を出力にルーティングします;\n 高い値は2を使用します。
toggle.active.desc=信号がパススルーか出力をゼロにするのかを設定します。
merge.select.desc=どの入力ポートを出力に送るのかをコントロールします。
merge.inputs.desc=供給されたポートの数です。
merge.interpolation.title=インターポレーション [ニアエストまたはリニア]
merge.interpolation.desc=一度に1つのポートのみを使用するか (ニアエスト)、2つの連続したポートを混ぜて使用するか (リニア) のいずれかに設定します。
merge.wrap.desc=高い選択値が入力ポート1にかかるように範囲をオフセットします。
merge.normalize.desc=入力ポート数に関わらず、選択信号範囲の'0' ~ '+1'を使用します。
split.select.desc=どの出力ポートが入力を受けるのかをコントロールします。
split.outputs.desc=提供された出力ポート数です。
split.interpolation.title=インターポレーション [ニアエストまたはリニア]
split.interpolation.desc=一度に1つのポートのみを使用するか (ニアエスト)、2つの連続したポートを混ぜて使用するか (リニア) のいずれかに設定します。
split.wrap.desc=高い選択値が入力ポート1にかかるように範囲をオフセットします。
split.normalize.desc=出力ポート数に関わらず、選択信号範囲の'0' ~ '+1'を使用します。
lr_gain.left.desc=左チャンネルのゲイン適用量です。
lr_gain.right.desc=右チャンネルのゲイン適用量です。
stereo_merge.left.desc=ステレオ出力の左に位置する信号です。
stereo_merge.right.desc=ステレオ出力の右に位置する信号です。
stereo_merge.mid.desc=ステレオ出力の中央に位置する信号です。
stereo_merge.side.desc=ステレオ出力のわきに位置する信号です。
stereo_split.left.desc=ステレオ入力の左コンテンツです。
stereo_split.right.desc=ステレオ入力の右コンテンツです。
stereo_split.mid.desc=ステレオ入力のミドルコンテンツです。
stereo_split.side.desc=ステレオ入力のサイドコンテンツです。


#level.
level.signal_in.desc=処理される信号です。
level.signal_in1.desc=信号入力1です。
level.signal_in2.desc=信号入力2です。
level.mod_in.desc=モジュレーション信号入力です。
level.out.desc=信号出力です。
level.bipolar.title=バイポーラー [切替]
level.bipolar.desc=全コントロールの範囲を '-100 %' ('-1') ~ '+100 %' ('+1')に設定します。
level.stereo-ize.desc=右チャンネルに逆のコントロール値を使用します。

level_module.value.desc=デシベルで定義されたレベル設定です。
value.value.desc=パーセンテージで定義れたレベル設定です。'100 %'はフルスケール信号 ('+1') の出力を意味します。
attenuate.amount.desc=入力信号のパススルー量です。
bias.amount.desc=追加れたパーセンテージレベルです。
gain_-_vol.amount.desc=ボリュームフェーダーとして構成されたスケーリングのデシベルを適用します。
gain_-_db.amount.desc=スケーリングのデシベルを適用します。
velo_mult.depth.desc=スケーリングの下方範囲です。 \n\n'0 %'ではベロシティは無視され、信号は最大のまま (読取: アッテネートなし)で通過します。その他の設定では最大ベロシティは最大信号をパスし、低いベロシティは相対的に信号をアッテネートします。
velo_mult.slew.desc=新しいベロシティレベルに達するまでの時間です。
velo_mult.response.desc=異なる用途のトランジションカーブです:
average.amount.desc=平均化された時間です。
bend.amount.desc=曲線係数を使用します。'0 %'は変化無し、正数値は対数曲線、負数値は指数曲線になります。
clip.level.desc=信号がクリップするレベルです。
curve.xy.title=クリック可能のカーブインターフェイス
curve.xy.desc=最高入出力レベルのポイントです。 \n[+]、最低入出力値 [-]、および使用さる湾曲率 (ラインの中央に表示) です。
curve.low_in.desc=再マップした最低入力レベルです。(入力値がこのレベル以下の場合は、アウトローレベルでクリップされます)
curve.high_in.desc=再マップした最高入力レベルです。(入力値がこのレベル以上の場合は、アウトローレベルでクリップされます)
lag.amount.desc=現在の入力レベルに達する前の時間です。
level_scaler.low.desc=入力で'0' を受信した際のレベル出力です。
level_scaler.high.desc=入力で'1' を受信した際のレベル出力です。
level_scaler.graphic.title=グラフィカルインターフェイス
level_scaler.graphic.desc=レベル調節と現在の出力を視覚化した代替えの対数表示です。
value_scaler.low.desc=入力で'0' を受信した際の値出力 (%設定) です。
value_scaler.high.desc=入力で'1' を受信した際の値出力 (%設定) です。
value_scaler.bipolar.desc=入力で'1' を受信した際の値出力 (%設定) です。
am/rm.carrier_in.desc=キャリア入力です。
am/rm.modulator_in.desc=モジュレーター入力です。
am/rm.amount.desc=キャリアとモジュレーター間の混ざり具合を扱うクロスフェーダーです。キャリアのみ ('0 %') からアンプリチュードモジュレーション (キャリアとモジュレーターの比率; '50 %')、リングモジュレーターのみ ('100 %') までを設定します。
am/rm.vca_note.title=注意: VCAシミュレーション
am/rm.vca_note.desc='50 %' (デフォルト値) に設定した場合、このモジュールは入力されたモジュレーター信号をユニポーラーにシフトします。このことにより、伝統的なVCA (Voltage-Controlled Amplifier) 構成 に便利なショートカットを供給します。
hold.logic_in.desc=高ロジックは現在の信号値を持続させます。低ロジックは全入力を出力にスルーさせます。
sample_/_hold.logic_in.desc=現在の信号値の取込みと出力をトリガーします。


#pitch.
pitch.in.desc=ピッチ信号として形成される信号です。
pitch.out.desc=Bitwigのピッチ基準に使用する信号出力です。
pitch.offset.title=メモ: プロセッサーまたはジェネレーター
pitch.offset.desc=このモジュールは設定量に従って、入力信号をシフトします。便利な追加機能として入力されない場合にこのモジュールはジェネレーターとして動作します。

pitch_module.pitch.title=ピッチ
pitch_module.pitch.desc=ノートとして定義されたピッチです。 \n(インスペクターパネルで切替可能)
pitch_module.freq.title=ピッチ
pitch_module.freq.desc=周波数として定義されたピッチです。 \n(インスペクターパネルで切替可能)
pitch_module.value.desc=読み取り可能なピッチ値としてピッチ設定を定義します。ゼロは 'C3' (ミドルC) を示し、整数値はセミトーン(半音)として扱われます。
pitch_module.stereo-ize.desc=(値'0'または'C3'を基準にした)右チャンネルのピッチを逆にします。 \n\n例えば、'C4' ('+12') に設定した場合、右チャンネルには'C2' ('-12') が適用されます。同様に'A2' ('-3')に設定した場合、'E3' ('+3')が出力されます。
pitch_module.disp_pitch.title=ノート表示
pitch_module.disp_pitch.desc=ピッチをノートとして表示します。
pitch_module.disp_freq.title=周波数表示
pitch_module.disp_freq.desc=ピッチを周波数として表示します。
octaver.amount.desc=オクターブによるピッチディチューンオプションです:
ratio_module.ratio.title=ピッチレシオ [0 ~ 99 : 1 ~ 99]
ratio_module.ratio.desc=入力されたピッチを分子と分母の設定でシフトします。 \n\n設定例: \n• '1:1'は変化無しを示します。'2:2'、'7:7'なども同様です。 \n• '6:1'は6に倍算します。(600%) \n• '1:4'は25%にスケールダウンします。(2オクターブ下)  \n• '4:3' はおそよ133%になります。(純正律で全4度上)
transpose.amount.desc=入力信号に追加されるピッチシフトです。
transpose.stereo-ness.desc=ピッチシフトするチャンネルです:
transpose.numeric.title=メモ: 偶数の半音設定で機能します。
transpose.numeric.desc=半音単位の設定は小数点の左側の数字をドラッグします。これにより小数点以下の設定が保持されます。 \n\nすべての相対的なピッチパラメーター(マイクロピッチデバイスなど)と同様、分数入力で設定できます。例えば、5度として '3/2' と入力した場合、Bitwigはこれを'7.02 st'に変換します。
pitch_quantize.in.desc=ピッチステップの設定(または演奏)のクォンタイズ信号入力です。
pitch_quantize.pitch_steps.title=ピッチステップ [12段階切替]
pitch_quantize.pitch_steps.desc=各ピッチクラス(C、C#、Dなど)を使用するかどうかを設定します。
pitch_quantize.pitch_leds.title=ピッチステップ [12 LED]
pitch_quantize.pitch_leds.desc=ホールドと使用されるピッチクラス(C、C#、Dなど)の視覚化です。
pitch_quantize.distribution.title=ノートディストリビューション [ユニフォームまたはニアエスト]
pitch_quantize.distribution.desc=ノートステップの間隔を均等してリズムの良い状態に設定 (ユニフォーム) にするか、各々の相対的なポジションを維持した不規則なリズムに設定 (ニアエスト) のいずれかにします。
pitch_quantize.use_notes.desc=デバイスのピッチ信号でノートステップ切替に使用するプリコードです。
pitch_quantize.note_source.title=ノートソース [メニュー]
pitch_quantize.note_source.desc=Sノートステップ設定のソースノートです。
by_semitone.in.desc=正確な半音にクォンタイズされる信号入力です。
pitch_scaler.low.desc=入力で'0' を受信した際のピッチ出力です。
pitch_scaler.high.desc=入力で'1' を受信した際のピッチ出力です。
pitch_scaler.value_help.title=低と高ピッチ値
pitch_scaler.value_help.desc=読取可能なBitwigピッチ値として定義されたピッチです。ゼロは 'C3' (ミドルC) を示し、整数値はセミトーン (半音) として扱われます。
zero_crossings.low.desc=追跡された最低周波数です。
zero_crossings.hi.desc=追跡された最高周波数です。


#math.
math.op_a.desc=操作のための信号A です。
math.op_b.desc=操作のための信号B です。
math.signal_in.desc=信号入力
math.signal_in1.desc=信号入力1
math.signal_in2.desc=信号入力2
math.signal_in2and.desc=信号入力2など
math.out.desc=結果の信号出力です。
math.signal_out.desc=信号出力です。
math.remainder_out.desc=取り除かれたオリジナル信号の量です。​

constant.value.desc=定義値
abs.sign.desc=入力された信号の極性です。(出力'+1'やゼロは正極、'-1'は負極になります)
minmax.max.desc=2つの入力の大きい方の信号です。
minmax.min.desc=2つの入力の小さい方の信号です。
quantize.step_size.desc=許可された出力値の間隔です。ステップサイズ'0.1' ('10 %') に設定した場合、'0'、'±0.1'、'±0.2'などの結果のみが許可されます。


#logic.
logic.op_a.desc=評価用の信号Aです。
logic.op_b.desc=評価用の信号Bです。
logic.clock_in.desc=クロック入力です。
logic.reset_in.desc=(トリガー出力を送信して) 次のクロックトリガーで内部カウンターをゼロにリセットします。
logic.out.desc=高ロジック ('+1') はトゥルー \n 低ロジック ('0') はファルスになります。
logic.gate_out.desc=高ロジック ('+1') はオン \n 低ロジック ('0') はオフになります。

button.gate.desc=ロジック出力状態を設定するクリック切替です。
button.on_text.title=オンラベル (テキスト)
button.on_text.desc=切替オンにした際に表示されるオプションのテキストです。
button.off_text.title=オフラベル (テキスト)
button.off_text.desc=切替オフにした際に表示されるオプションのテキストです。
trigger.signal_in.desc=出力にマージする信号入力です。
trigger.trigger.desc=短い高ロジック状態を生み出すクリック切替です。
clock_divide.clock_interval.desc=別のトリガー信号出力を送る前のサイクル長です。
clock_quantize.trigger_in.desc=次のクロックパルスででゲート信号のパスをトリガーします。
clock_quantize.mode.title=出力モード [T (トリガー) または G (ゲート)]
clock_quantize.mode.desc=クロック信号がゼロに戻る (トリガー) または、次のクロック信号が到着 (ゲート) して際の際のいずれかで各出力ゲートを終了します。
gate_length.trigger_in.desc=新しいロジックパルスの開始をトリガーします。
gate_length.length.desc=各トリガーされたロジックパルスの高ロジック長です。
gate_repeat.gate_in.desc=ロジックパルスの開始/停止をします。
gate_repeat.length.desc=出力される各ロジックパルスの長です。
gate_delay.gate_in.desc=全体または一部のトランジションがディレイされた、ロジック信号として処理される信号です。
gate_delay.delay.desc=適用されたディレイタイムです。 \n\nメモ: モードが1種類のトランジションのみをディレイさせた場合、それらのトランジションはディレイタイムよりも長くすることでパススルーされます。
gate_delay.mode.desc=ディレイされるトランジションです: \n
latch.toggle_in.desc=現在の出力状態をトリガー切替します。
latch.set_in.desc=現在の出力を高ロジックにトリガー設定します。
latch.reset_in.desc=現在の出力を低ロジックにトリガー設定します。
n-latch.trigger_in1.desc=トリガー入力 1
n-latch.trigger_in2and.desc=トリガー入力 2など
n-latch.gate_out1.desc=ポートが最新のトリガー信号を受信した際の高ロジック ('+1') です。それ以外の場合は低ロジック ('0') になります。
n-latch.gate_out2and.desc=ゲート出力1などに相当します。. 
n-latch.count.desc=提供された入力と出力ポートの数です。
\=.exact.desc=信号は同一の浮動小数点値である必要があります。2つの移動信号処理時に厳しい状態になる可能性があります。
\=.table.title=トゥルーステーブル
\=.table.desc=A       B       =\n0       0       1\n0       1       0\n1       0       0\n1       1       1
≥.table.title=トゥルーステーブル
≥.table.desc=A       B       ≥\n0       0       1\n0       1       0\n1       0       1\n1       1       1
≤.table.title=トゥルーステーブル
≤.table.desc=A       B       ≤\n0       0       1\n0       1       1\n1       0       0\n1       1       1
>.table.title=トゥルーステーブル
>.table.desc=A       B       >\n0       0       0\n0       1       0\n1       0       1\n1       1       0
<.table.title=トゥルーステーブル
<.table.desc=A       B       <\n0       0       0\n0       1       1\n1       0       0\n1       1       0
≠.exact.title=完全不一致のみ [切替]
≠.exact.desc=信号は同一の浮動小数点値ではない必要があります。2つの移動信号処理時に厳しい状態になる可能性があります。
≠.table.title=トゥルーステーブル
≠.table.desc=A       B       ≠\n0       0       0\n0       1       1\n1       0       1\n1       1       0
not.signal_in.desc=反転信号です。
not.table.title=トゥルーステーブル
not.table.desc=In      NOT\n1       0\n0       1
and.table.title=トゥルーステーブル
and.table.desc=A       B       AND\n0       0       0\n0       1       0\n1       0       0\n1       1       1
nand.table.title=トゥルーステーブル
nand.table.desc=A       B       NAND\n0       0       1\n0       1       1\n1       0       1\n1       1       0
or.table.title=トゥルーステーブル
or.table.desc=A       B       OR\n0       0       0\n0       1       1\n1       0       1\n1       1       1
nor.table.title=トゥルーステーブル
nor.table.desc=A       B       NOR\n0       0       1\n0       1       0\n1       0       0\n1       1       0
xor.table.title=トゥルーステーブル
xor.table.desc=A       B       XOR\n0       0       0\n0       1       1\n1       0       1\n1       1       0
xnor.table.title=トゥルーステーブル
xnor.table.desc=A       B       XNOR\n0       0       1\n0       1       0\n1       0       0\n1       1       1
