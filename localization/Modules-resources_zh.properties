module.enable_polyphony.title=复音设置
module.enable_polyphony.desc=这些设置当前处于禁用状态，因为设备未处于复音模式

#i/o.
i/o.signal_in.desc=信号发送
i/o.out.desc=信号接收
i/o.chooser.desc=使用信号路径
i/o.affect_lifetime.desc=当设备为复音时，在此模块处于活动状态时保持声音活跃
i/o.smoothing.desc=对此信号进行平滑处理
i/o.cv_mode.title=模式[AC or DC]
i/o.cv_mode.desc=无论您的音频接口采用直流(DC)或交流电(AC)
i/o.cv_smooth.desc=平均时间以使信号平滑
i/o.cv_smooth_filt.desc=应用于输入CV信号的4极低通滤波器的截止频率
i/o.cv_gain.desc=增益应用于传入的CV信号

audio_in.out.desc=总线中从设备音频接收到的信号
gate_in.out.desc=注意设备接收到的音符门限信号
phase_in.out.desc=相位信号，如被配置为通过所述设备
phase_in.note.title=注意: 设置在设备检查器中
phase_in.note.desc=此信号的所有设置都在设备的“检查器”面板的 \n"Ø 设备阶段" 部分中。
pitch_in.out.desc=由该装置接收的音符音高的信号
pitch_in.note_priority.desc=Whether to prefer to Lowest or Highest (pitch-wise) notes, the Last notes played (time-wise), or to use the device's current setting (Default)
pitch_in.note_priority_curr.title=当前音符优先
pitch_in.note_priority_curr.desc=表示默认以外的音符优先级设置
pressure_in.out.desc=由所述设备接收的单极音符聚压力信号(或如果接收到信道触后，这些值将被应用到所有的声音)
timbre_in.out.desc=设备接收的双极音色expression信号
timbre_in.relative.desc=从音符开始将当前信号偏移为零值
velocity_in.out.desc=由该设备接收的音符速度信号
audio_out.in.desc=信号从设备的音频总线发送出去
audio_out.threshold.desc=阈值电平用于确定是否一个信号为有效
audio_out.timeout.desc=用于确定信号是否处于激活状态的超时
audio_out.clipping.title=输出限幅模式[关，硬，或软]
audio_out.clipping.desc=应用于音频输出的剪辑类型
audio_sidechain.out.desc=从选定工程路径音频信号
audio_sidechain.path.title=音频路径
audio_sidechain.path.desc=工程使用路径
hw_in.out.desc=从所选择的外部路径的音频信号
hw_in.path.title=音频路径
hw_in.path.desc=传入音频硬件使用路径
hw_out.in.desc=发送到所选择的外部路径信号
hw_out.path.title=音频路径
hw_out.path.desc=传出的音频硬件使用路径
cv_in.out.desc=控制电压(CV)从所选择的外部路径信号
cv_in.path.title=控制电压路径
cv_in.path.desc=传入CV路径使用
cv_out.in.desc=信号发送到选定的外部CV输出总线
cv_out.path.title=控制电压路径
cv_out.path.desc=传出CV路径使用
cv_pitch_out.in.desc=信号发送到选定的外部CV输出音高总线
cv_pitch_out.path.title=控制电压Pitch路径
cv_pitch_out.path.desc=传出CV音调路径使用
cv_pitch_out.range.desc=输入信号缩放到的八度范围
cv_pitch_out.root.desc=Note that is triggered with a zero value
key_on.out.desc=设备为一个指定的音符和通道接收的音符门限信号
key_on.note.desc=Note whose gate signal is provided
key_on.channel.desc=测试其音符的通道(所有通道为'0')
key_on.learn.desc=单击时，根据下一个传入的音符设置音符和通道参数
keys_held.out.desc=Number of keys currently active at the device's input
transport_playing.out.desc=High-logic state if the application's transport is playing; low-logic if it is stopped
modulator_out.in.desc=Signals to use for the modulator \n\nNote: Modulator signals run at the application's sample rate and are mono (incoming stereo signals will be summed).
modulator_out.modulator.title=调制器输出
modulator_out.modulator.desc=用于参数的无线控制


#display.
display.signal_in.desc=要显示的信号
display.signal_in1.desc=1号信号显示
display.signal_in2.desc=2号信号显示
display.signal_in3.desc=3号信号显示
display.signal_in4.desc=4号信号显示
display.signal_out1.desc=信号输出1，从没有改变的输入传递
display.signal_out2.desc=信号输出2，从没有改变的输入传递
display.out.desc=信号输出，从没有改变的输入传递

comment.comment.title=评论显示[文字]
comment.comment.desc=显示评论检查器面板中输入
comment.title.title=标题显示[文字]
comment.title.desc=模块名称，如果用户已经定义它(检查器面板中), 以模块的颜色显示
comment.entry.title=评论输入区[文字]
comment.entry.desc=显示评论的输入区域
label.label.title=标签显示[文字]
label.label.desc=模块名称(在检查器面板中设置), 以模块的颜色显示
xy.x_out.desc=代表X位置的信号
xy.y_out.desc=代表Y位置的信号
xy.pad.title=XY控制板[interface]
xy.pad.desc=For moving the XY pair with one click or touch
xy.x_value.desc=当前X值 (也可用于为其分配调制器)
xy.y_value.desc=当前Y值 (也可用于为其分配调制器)
xy.x_bipolar.title=X双极[切换]
xy.x_bipolar.desc=将x轴的范围从 '-1' 设置为 '+1'
xy.y_bipolar.title=Y双极[切换]
xy.y_bipolar.desc=将y轴的范围从 '-1' 设置为 '+1'
oscilloscope.trigger_in.desc=[When in Slow or Fast mode] \nTrigger clears and redraws the module's trace
oscilloscope.mode.title=Mode [slow, fast, or pitch]
oscilloscope.mode.desc=设置跟踪速度慢或快，或设置成跟随设备的传入音符音高信号
oscilloscope.display.title=显示的声音[最后一个声音或所有声音]
oscilloscope.display.desc=显示每个信号的最后一个声音，或显示所有声音的总和(很容易超出范围)
value_readout.mode.title=显示单元[1, dB, st, Hz]
value_readout.mode.desc=The unit used to display the signal. Either raw signal values (1), decibel levels (dB), note pitch and semitones (st), or note pitch and frequency in Hertz (Hz).


#phase.
phase.phase_in.desc=信号输入以进行相位处理
phase.step_in.desc=触发前进到下一步
phase.reset_in.desc=下一个时钟触发器到达时，触发器将重置为步骤1
phase.pitch_in.desc=Pitch signal input, whose octave will be used to generate a phase out \n\nSome example values: \n• Any C input → '0.000' output \n• Any F♯/G♭ input → '0.500' output \n• A super sharp B input → '0.999' output
phase.out.desc=相位信号输出
phase.gate_out.desc=Gate signal that is high logic ('+1') for the first half of the phase ramp

ø_bend.amount.desc=Curve factor used, where '0 %' results in no change, positive values impose a logarithmic-type curve, and negative values impose an exponential one
ø_reset.logic_in.desc=触发将信号输入移至零
ø_reset.reset_pre-cord.desc=前置编码将设备的音符门限信号连接到重设
ø_scaler.logic_in.desc=触发器重置过程
ø_scaler.rate.desc=Scales the phase rate by a factor, where '1.0' (100%) represents no change, '2.0' is twice as fast, and '0.33' is roughly one-third the speed
ø_scaler.ratio.title=缩放比例[0 至 99 : 1 至 99]
ø_scaler.ratio.desc=Scales the module's rate as a numerator:denominator pair \n\nSome example settings: \n• '1:1' represents no change. \n• '6:1' is six times faster (600%). \n• '1:4' slows down to 25% (a quarter the original speed, or one phase ramp for every four of the input signal). \n• '0:x' zeroes out the ratio.
ø_counter.step_count.desc=Number of steps to advance thru
ø_formant.amount.desc=适用的共振峰偏移量
ø_lag.amount.desc=达到当前相位输入电平之前的时间
ø_mirror.amount.desc=偏移量然后反映相位输入
ø_shift.amount.desc=偏移相位输入的百分比，负值会使信号延迟移出，正值会使信号移得较早
ø_sinemod.depth.desc=正弦调制器信号的幅度
ø_sinemod.cycles.desc=正弦调制器信号中的数字周期
ø_sinemod.add.desc=将输入信号加到调制信号上
ø_skew.amount.desc=输入信号的电平将重新映射为 '+0.5'
ø_sync.amount.desc=偏移量然后包裹相位输入


#data.
data.phase_in.desc=驱动模块的数据查找
data.logic_out.desc=根据当前相位输出门信号
data.pitch_out.desc=根据当前相位位置输出音调信号
data.out.desc=根据当前相位位置输出信号
data.phase_track.desc=前置编码使用设备相位(加上任何输入相位信号)来驱动模块的相位
data.step_count.desc=Number of steps
data.sharpness.desc=如何准确的(而不是平均)波形
data.modulator.title=调制器输出
data.modulator.desc=用于参数的无线控制

gates.steps.title=步骤[切换]
gates.steps.desc=每个可用步骤一个切换
gates.mode.title=输出模式[触发或门限]
gates.mode.desc=For each enabled step, sends a gate signal for either 50% of its duration (trigger) or 100% of its duration, allowing ties when successive steps are enabled (gate)
pitches.steps.title=步骤[音高滑块]
pitches.steps.desc=One pitch slider for each available step. Light frames surround each C, such as the top, bottom, and center rows. Background colors indicate whether that row houses a natural note (gray) or an accidental (black). \n\nWhen clicking and dragging a pitch slider, holding [SHIFT] disables snapping to semitones, allowing micro-pitches.
pitches.offset.desc=Octave offset for the step display, where '0' keeps middle C at center and '+1' shifts the display up an octave, etc.
pitches.octaves.desc=音符范围一次显示在模块上
steps.steps.title=步骤[sliders]
steps.steps.desc=一个值滑块为每个可用的步骤
steps.bipolar.desc=将每个步骤的范围从 '-1' 设置为 '+1'
steps.interpolation.desc=根据相位输入对交叉渐变相邻值(而不是仅输出设置值)
probabilities.logic_out.desc=Gate signal out based on the probability of the step at the current phase position
probabilities.steps.title=步骤[sliders]
probabilities.steps.desc=One slider for the probability of each available step. This means that a step set to '100 %' will always trigger, a step set to '0 %' will never trigger, a step set to '50 %' will trigger half of the time, etc.
ø_pulse.pw.desc=Percentage of each cycle that the pulse wave stays negative
array_module.read_in.desc=位置发送到输出
array_module.write_in.desc=位置写入到
array_module.value_in.desc=信号被捕获
array_module.gate_in.desc=触发将值复制到写入位置
array_module.size.desc=Length (number of addresses) used by the array
array_module.normalize.desc=Uses true phase signals (of range '0' to almost '+1') for Read and Write in ports. \n\nOtherwise "index" values are expected (of range '0' to almost the array's Size value).


#oscillator.
oscillator.gate_in.desc=触发重新启动振荡器的相位
oscillator.reset_pre-cord.desc=Pre-cord connects device's note gate signals to Retrigger In
oscillator.phase_in.desc=偏移振荡器的相位
oscillator.pitch_in.desc=控制输入已添加到音高总线
oscillator.out.desc=信号输出
oscillator.keytrack.desc=前置编码将设备的音调信号连接到模块的音调总线
oscillator.ratio.title=音调比率[0 至 99 : 1 至 99]
oscillator.ratio.desc=Scales the module's pitch as a numerator:denominator pair \n\nSome example settings: \n• '1:1' represents no change. \n• '6:1' multiplies by six (600%). \n• '1:4' scales down to 25% (or two octaves down). \n• '4:3' scales to about 133% (or up a perfect fourth in just intonation). \n• '0:x' zeroes out the pitch buss, leaving the frequency offset solely in control.
oscillator.pitch_shift.desc=改变模块的音高
oscillator.stereo-ize.desc=应用逆频率偏移到右声道
oscillator.frequency_shift.desc=改变模块的频率

triangle.skew.desc=Tilts the waveshape from a traditional triangle toward a sawtooth or ramp
triangle.fold.desc=将波形环绕回去，创建其他周期
sine.skew.desc=将波形从正弦倾斜到扭曲的锯齿或斜坡
sine.fold.desc=将波形环绕回去，创建其他周期
saw.shape.desc=Bends the descent of the sawtooth slightly upward or downward
saw.sync.desc=根音的音调的半音偏移，用于音色的偏移
pulse.pw.desc=Percentage of each cycle that the pulse wave stays positive
pulse.sync.desc=根音的音调的半音偏移，用于音色的偏移
phase-1.algorithm.title=算法[各种形状]
phase-1.algorithm.desc=Defines the waveshape used across all possible Shape settings:
phase-1.shape.desc=确定当前算法中的波形
phase-1.formant.title=共振峰[和声 1 (基本) 至 9]
phase-1.formant.desc=和声作为波形中的附加正弦周期插入
phase-1.feedback.desc=反馈用于相位调制的输出信号量
swarm.spread.desc=应用的失谐宽度
swarm.skirt.desc=微调失谐分布
swarm.wave.title=波形[各种波]
swarm.wave.desc=波形以用于群的每个声音
sampler.gate_in.desc=触发/重新触发所选样本的 \n前置编码连接设备的音符门信号
sampler.pitch_in.desc=控制输入已添加到音高总线上 (并用于多采样模式下的采样选择)\n前置编码连接设备的音符门信号
sampler.velocity_in.desc=[多采样模式]用于样本选择的速度信号\n前置编码连接设备的音符速度信号 \n\n注意: 此模块上的所有端口均为单声道。
sampler.zparams.title=区域参数 1, 2, 和 3
sampler.zparams.desc=[多采样模式]当前触发的区域的参数值
sampler.select.desc=[多采样模式]根据其选择范围确定触发哪些区域
sampler.pitch.desc=播放频率控制(不影响样本选择)
sampler.play_mode.title=播放模式
sampler.play_mode.desc=音频播放/控制方法：
sampler.speed.desc=控制播放速度。(在重复音高模式下，这也会影响音高。)
sampler.formant.desc=[循环模式]共振峰移位作为音色控制
sampler.grain.desc=[纹理模式]每个音频颗粒的长度
sampler.motion.desc=[纹理模式]添加到播放头的动画数量
sampler.freeze.desc=保持在适当的播放头，你需要通过位置调制来控制它
sampler.ram.title=载入RAM [切换]
sampler.ram.desc=允许播放头/循环调制
sampler.playhead.desc=偏移播放头的当前位置
sampler.position.desc=在样本的开始和结束标记之间缩放
sampler.loop_start.desc=相对偏移循环的位置
sampler.loop_length.desc=缩放循环结束时间
sampler.zone_area.title=区域控制
sampler.zone_area.desc=特定于所加载样品的对照


#random.
random.trigger_in.desc=Trigger causes a new random value at output
random.chance_in.desc=Directly sets the Chance parameter
random.out.desc=随机信号输出
random.chance.desc=传入触发将产生触发的可能性
random.stereo.desc=为左右声道生成独立的值

noise.type.title=噪声类型[白色或粉色]
noise.type.desc=选择随机分布为白色(每个频率相等的能量)或粉色(每个八度相等的能量)
s/h_lfo.smoothing.desc=应用的插补量
s/h_lfo.feedback.desc=Correlation of successive output values, where positive settings trend toward small changes over time (à la Brownian motion) and negative settings can lead to repeating patterns
s/h_lfo.epoch.desc=反馈循环使用的序列长度(步数)
chance.trigger_in.desc=触发会在输出端引起可能的事件
chance.out.desc=短触发信号
dice.out.desc=随机单极值


#lfo.
lfo.gate_in.desc=触发器重新启动LFO的阶段
lfo.phase_in.desc=抵消LFO的相位
lfo.rate_in.desc=控制输入已添加到速率总线
lfo.out.desc=信号输出
lfo.logic_out.desc=High logic for the first half of the period, and low logic for the second half
lfo.modulator.title=调制器输出
lfo.modulator.desc=用于参数的无线控制
lfo.waveshape.title=Waveshape [triangle, pulse, sine, teeth]
lfo.waveshape.desc=基本波形可供选择，随偏斜参数而变化
lfo.skew.desc=波形变化量
lfo.rate.desc=当前时基中的频率
lfo.timebase.title=时基[频率或音符长度]
lfo.timebase.desc=单元用于率
lfo.phase_all.desc=转移模块的相位
lfo.phase_offset.desc=相对移动右声道的相位
lfo.bipolar.desc=将模块的输出从大约 '-1' 缩放到 '+1'

clock.rate.desc=Rate in Hertz
transport.timebase.title=时基[小节或节拍长度]
transport.timebase.desc=单元用于率
transport.length.desc=设备时相信号的波长，以当前时基为单位
transport.offset.desc=Timing offset in Timebase units, to shift the output early (positive) or late (negative)
transport.shuffle.desc=Applies Applies the transport's groove (when enabled) to this module
transport.free-run.desc=不管运行状态如何，都继续运行


#envelope.
envelope.signal_in.desc=信号由包络信号缩放
envelope.signal_slope_in.desc=信号要缩放
envelope.gate_in.desc=高逻辑开始攻击阶段。 低逻辑开始发布
envelope.gate_pre-cord.desc=Pre-cord connects device's note gate signals to Gate In
envelope.trigger_in.desc=Trigger starts the attack stage\n
envelope.trigger_pre-cord.desc=Pre-cord connects device's note gate signals to Trigger In
envelope.signal_out.desc=输入信号加上包络线
envelope.signal_slope_out.desc=信号输出
envelope.env_out.desc=包络信号
envelope.modulator.title=调制器输出
envelope.modulator.desc=用于参数的无线控制
envelope.attack.desc=从当前的包络值上升时间至100%
envelope.decay.desc=开始阶段后的下降时间
envelope.sustain.desc=衰减阶段结束的电平
envelope.release.desc=从当前的包络值下降时间为0％
envelope.attack_curve.desc=Slope of attack stage ('0 %' is linear)
envelope.decay_curve.desc=Slope of decay stage ('0 %' is linear)
envelope.release_curve.desc=Slope of release stage ('0 %' is linear)
envelope.lifetime.desc=当设备为复音时，在此包络发生器处于活动状态时保持声音激活

ad_module.looping.desc=重新启动信封每当“触发”输入仍然很高
follower.signal_in.desc=信号有它的信封中提取
follower_rf.rise.desc=转换速度提高电平
follower_rf.fall.desc=转换速度降低电平
follower_rf.avg_mode.title=平均模式[peak 或 RMS]
follower_rf.avg_mode.desc=Switch between faster- and slower-moving averages
follower.time.desc=转换速度为所有电平的更改
follower.rms.desc=使用RMS进行信号平均，它遵循较慢的声音“主体”而不是信号峰值
slope_↗.time.desc=转换时间信号的变化上升
slope_↘︎.time.desc=转换时间信号的变化下降


#filter.
filter.signal_in.desc=信号要过滤
filter.cutoff_in.desc=控制输入已添加到截止总线
filter.out.desc=信号输出
filter.cutoff.desc=Frequency where 3 dB of attenuation occurs
filter.reso.desc=过滤器中应用的反馈量
filter.keytrack.desc=Amount of device's pitch signals added to module's cutoff buss
filter.slope.title=Slope [various]
filter.slope.desc=Steepness of the filter, in dB/oct
filter.poles.title=Poles [each pole represents another -6 dB/oct]
filter.poles.desc=过滤器的陡度
filter.linearity.title=线性[对称或不对称]
filter.linearity.desc=增益如何应用于共振

svf.cutoff.desc=Frequency where 3 dB of attenuation occurs (or the center frequency for band-pass modes)
svf.mode.title=滤波器模式[low-, band-, or high-pass]
svf.mode.desc=使用的过滤器类型
comb.cutoff.desc=Frequency where 3 dB of attenuation occurs
comb.reso.desc=过滤器中应用的反馈量
comb.feedback_invert.title=反馈极性[正常或反向]
comb.feedback_invert.desc=用于缩放反馈的符号


#shaper.
shaper.signal_in.desc=Signal to be shaped
shaper.out.desc=Shaped signal out

chebyshev.amount.desc=Partial to target for emphasis ('3.0' represents an octave and a fifth up, for example)
distortion.amount.desc=应用的增益量
quantizer.amount.desc=设置用作电平的幅度步长
rectifier.positive_amount.desc=缩放用于所有正值
rectifier.negative_amount.desc=缩放用于所有负值
wavefolder.amount.desc=Gain applied before the signal is folded back
curve.low_out.desc=最低输出电平
curve.high_out.desc=最高输出电平
curve.curve.desc=使用的曲线系数，其中'0 %'不变，正值表示对数曲线，负值表示指数曲线


#delay.
delay.signal_in.desc=信号被延迟
delay.cutoff_in.desc=控制输入已添加到延迟时间总线
delay.out.desc=延迟信号输出
delay.unit.title=延迟单元[时间或音符持续时间]
delay.unit.desc=单位用于设定延迟时间
delay.time.desc=基于时间的延迟时间设置
delay.beats.title=延迟节拍[1 至 8]
delay.beats.desc=用于延迟时间的节拍数
delay.offset.desc=Scales the beat unit used, with clickable detents at even, triplet, and dotted values
delay.feedback.desc=反馈的输出信号量
delay.low-pass.desc=Low-pass cutoff frequency for feedback signal
delay.clipping.title=Feedback clipping mode [soft or hard]
delay.clipping.desc=Type of clipping in the feedback loop

long_delay.out.desc=Delayed signal out \n\nNote: To create a feedback loop between modules, insert this module. It is specially configured to allow feedback connections.
all-pass.time.desc=延迟时间
all-pass.gain.desc=应用了增益补偿量，'100 %'抵消了影响
recorder.signal_in.desc=被录制的信号
recorder.record_in.desc=设置是否进行录制 \n\n注意: 此端口为单声道。
recorder.play_in.desc=设置是否进行播放 \n\n注意: 此端口为单声道。


#mix.
mix.signal_in.desc=信号输入
mix.signal_in1.desc=信号输入1
mix.signal_in2.desc=信号输入2
mix.signal_in2and.desc=信号输入2,等.
mix.signal_out1.desc=信号输出1
mix.signal_out2.desc=信号输出2
mix.signal_out2and.desc=信号输出2,等.
mix.out.desc=信号输出

blend.mix.desc=Balance between in 1 and in 2, as a ratio
blend.mode.title=混合模式[相等增益或相等功率]
blend.mode.desc=用于交叉渐变两个信号功率规则
mixer.signal_in.desc=通道 1 信号输入
mixer.signal_in2.desc=通道 2 信号输入
mixer.signal_in3.desc=通道 3 信号输入
mixer.signal_in4.desc=通道 4 信号输入
mixer.signal_in5.desc=通道 5 信号输入
mixer.signal_in6.desc=通道 6 信号输入
mixer.volume.desc=通道 1 的音量缩放
mixer.panning.desc=通道 1 的立体声声像位置
mixer.solo_mute.title=Ch 1 Solo & Active [切换]
mixer.solo_mute.desc=Solo status of channel 1 (S), and whether channel 1 is audible or not (speaker icon)
lr_gain.left.desc=应用于左声道的增益量
lr_gain.right.desc=应用于右声道的增益量
select.logic_in.desc=Low value routes in 1 to output;\n high value uses in 2
toggle.active.desc=Whether the signal is passed thru or zeroed out
merge.select.desc=控制将哪些端口发送到输出
merge.inputs.desc=提供的输入端口数
merge.interpolation.title=Interpolation [nearest or linear]
merge.interpolation.desc=Whether only one in port is used at a time (nearest), or a blend of two adjacent ports is used (linear)
merge.wrap.desc=Offsets the range so that a high Select value wraps around to in port 1
merge.normalize.desc=使用选择信号范围为 '0' 至 '+1',而不考虑端口数
split.select.desc=控制哪个输出端口接收输入
split.outputs.desc=提供的出端口数
split.interpolation.title=Interpolation [nearest or linear]
split.interpolation.desc=Whether only one out port is used at a time (nearest), or the input is blended between two adjacent out ports (linear)
split.wrap.desc=Offsets the range so that a high Select value wraps around to out port 1
split.normalize.desc=不管输出端口数如何，使用选择信号范围为'0' 至 '+1'
stereo_merge.left.desc=信号置于立体声输出的左侧
stereo_merge.right.desc=信号置于立体声输出的右侧
stereo_merge.mid.desc=信号置于立体声输出的中间
stereo_merge.side.desc=信号放置在立体声输出的侧面
stereo_split.left.desc=立体声输入的左内容
stereo_split.right.desc=立体声输入的右内容
stereo_split.mid.desc=立体声输入的中间内容
stereo_split.side.desc=立体声输入的侧面内容
stereo_width.width.desc=输入信号的相对宽度('100 %'表示不变)


#level.
level.signal_in.desc=信号处理
level.signal_in1.desc=信号输入 1
level.signal_in2.desc=信号输入 2
level.mod_in.desc=调制信号输入
level.out.desc=信号输出
level.bipolar.title=双极[切换]
level.bipolar.desc=将所有控件的范围从'-100 %' ('-1') 设置为 '+100 %' ('+1')
level.stereo-ize.desc=对右声道使用反向控制值

level_module.value.desc=Defined level set in decibels
value.value.desc=定义的电平设置为百分比，表示'100 %' 输出满量程信号 ('+1')
attenuate.amount.desc=通过的传入信号量
bias.amount.desc=添加的百分比电平
gain_-_vol.amount.desc=应用了缩放的分贝，配置为音量推子
gain_-_db.amount.desc=缩放比例已应用
average.amount.desc=平均时间
bend.amount.desc=使用的曲线系数，其中'0 %'不变，正值表示对数曲线，负值表示指数曲线
clip.level.desc=Level at which the signal will clip
curve.xy.title=可点击曲线界面
curve.xy.desc=With points for the highest input/output level \n[+], the lowest input/output value [-], and the curvature used (shown in the middle of the line)
curve.low_in.desc=最低输入电平被重新映射(低于此电平的输入值将被剪辑为输出低电平)
curve.high_in.desc=最高输入电平被重新映射(高于此电平的输入值将被剪辑为高输出电平)
lag.amount.desc=达到当前输入电平之前的时间量
level_scaler.low.desc=输入接收到'0'时的电平输出
level_scaler.high.desc=输入接收到'1'时的电平输出
level_scaler.graphic.title=图形界面
level_scaler.graphic.desc=备用对数显示，可调节电平并可视化当前输出
value_scaler.low.desc=值输出(设定为百分比)时'0'的输入端接收到的
value_scaler.high.desc=值输出(设定为百分比)时'1'的输入端接收到的
value_scaler.bipolar.desc=值输出(设定为百分比)时'1'的输入端接收到的
am/rm.carrier_in.desc=Carrier in
am/rm.modulator_in.desc=调制器输入
am/rm.amount.desc=Crossfader blending between carrier only ('0 %'), then amplitude modulation (of the carrier and modulator; '50 %'), and finally ring modulation ('100 %')
am/rm.vca_note.title=注意: VCA simulation
am/rm.vca_note.desc=When set to '50 %' (the default value), this module shifts the incoming modulator signal to be unipolar, providing a convenient shortcut for a traditional VCA (voltage-controlled amplifier) configuration.
hold.logic_in.desc=High-logic sustains the current signal value; low-logic passes all input thru to the output
sample_/_hold.logic_in.desc=触发器捕获当前信号值并输出


#pitch.
pitch.in.desc=输入的信号将被定调为音调信号
pitch.out.desc=使用Bitwig的音高标准发出信号

pitch_module.pitch.title=Pitch
pitch_module.pitch.desc=Defined pitch as note \n(switchable in Inspector Panel)
pitch_module.freq.title=Pitch
pitch_module.freq.desc=Defined pitch as frequency \n(switchable in Inspector Panel)
pitch_module.value.desc=Defined pitch set as readable pitch value, meaning zero represents 'C3' (middle C) and each whole number is a semitone
pitch_module.stereo-ize.desc=Uses the inverse pitch (around '0' or 'C3') for the right channel. \n\nFor example, a setting of 'C4' ('+12') would use 'C2' ('-12') on the right channel. And a setting of 'A2' ('-3') would output 'E3' ('+3')
pitch_module.disp_pitch.title=显示音符
pitch_module.disp_pitch.desc=Displays pitch as note
pitch_module.disp_freq.title=显示频率
pitch_module.disp_freq.desc=Displays pitch as frequency
transpose.amount.desc=Pitch shift已添加到输入信号
transpose.stereo-ness.desc=哪些通道pitch shifted:
transpose.numeric.title=注意: Working in even semitones
transpose.numeric.desc=By dragging the number on the left of the decimal, you will only shift by one full semitone at a time. This preserves the decimal portion. \n\nAs with any relative pitch parameter (like the Micro-pitch device), you can also type fractions. For example, you could type in '3/2' for a just fifth, which Bitwig will convert to '7.02 st'.
pitch_quantize.in.desc=信号要量化以设置(或播放)音高步长
pitch_quantize.pitch_steps.title=Pitch Steps [12个切换]
pitch_quantize.pitch_steps.desc=Sets whether each pitch class (C, C#, D, etc.) will be used
pitch_quantize.pitch_leds.title=Pitch Steps [12 LEDs]
pitch_quantize.pitch_leds.desc=Visualizes the pitch classes (C, C#, D, etc.) that are held and will be used
pitch_quantize.distribution.title=音符分布[均匀或最接近]
pitch_quantize.distribution.desc=Either spaces note steps equally for even rhythms (uniform) or keeps their relative positions for irregular rhythms (nearest)
pitch_quantize.use_notes.desc=Pre-cord uses device's pitch signals to toggle note steps
pitch_quantize.note_source.title=音符源[菜单]
pitch_quantize.note_source.desc=Source of notes for setting note steps
by_semitone.in.desc=将信号量化为精确的半音
pitch_scaler.low.desc=Pitch output when '0' is received at input
pitch_scaler.high.desc=Pitch output when '1' is received at input
pitch_scaler.value_help.title=Low and High Pitch Values
pitch_scaler.value_help.desc=Defined pitches as readable Bitwig pitch value, meaning zero represents 'C3' (middle C) and each whole number is a semitone
zero_crossings.low.desc=Lowest frequency tracked
zero_crossings.hi.desc=Highest frequency tracked


#math.
math.op_a.desc=信号A的操作
math.op_b.desc=信号B的操作
math.signal_in.desc=信号输入
math.signal_in1.desc=信号输入 1
math.signal_in2.desc=信号输入 2
math.signal_in2and.desc=信号输入 2,等.
math.out.desc=结果信号输出
math.signal_out.desc=信号输出
math.remainder_out.desc=删除的原始信号量

constant.value.desc=定义值
abs.sign.desc=输入信号的极性(outputs '+1' for positive or zero, '-1' for negative)
minmax.max.desc=两个输入的信号较大
minmax.min.desc=两个输入的信号较小
quantize.step_size.desc=Interval of allowed output values, so a step size of '0.1' ('10 %') would only allow results of '0', '±0.1', '±0.2', etc.


#logic.
logic.op_a.desc=信号A进行评估
logic.op_b.desc=信号B进行评估
logic.clock_in.desc=时钟输入
logic.reset_in.desc=在下一次时钟触发时将内部计数器重置为零(发送触发输出)
logic.out.desc=High logic ('+1') for true, \n low logic ('0') for false
logic.gate_out.desc=High logic ('+1') for on, \n low logic ('0') for off

button.gate.desc=可点击的切换按钮，用于设置逻辑输出状态
button.on_text.title=在标签上(文字)
button.on_text.desc=切换启用时显示的可选文本
button.off_text.title=取消标签(文字)
button.off_text.desc=切换关闭时显示的可选文本
trigger.signal_in.desc=信号输入与输出合并
trigger.trigger.desc=可点击的触发器，用于产生短的高逻辑状态
clock_divide.clock_interval.desc=发送另一个触发信号之前的周期长度
clock_quantize.trigger_in.desc=触发以在下一个时钟脉冲传递门信号
clock_quantize.mode.title=输出模式[触发或门限]
clock_quantize.mode.desc=当时钟信号返回零(触发)或下一个时钟信号到达(门限)时，结束每个输出门限
gate_length.trigger_in.desc=触发开始新的逻辑脉冲
gate_length.length.desc=每个触发逻辑脉冲的高逻辑持续时间
gate_repeat.gate_in.desc=启动/停止逻辑脉冲
gate_repeat.length.desc=每个输出逻辑脉冲持续时间
gate_delay.gate_in.desc=信号被视为逻辑信号，整个信号或其某些转换被延迟
gate_delay.delay.desc=延迟时间施加 \n\n注意: 当模式仅延迟一个类型的过渡的，这些转换必须长于通要传递的延迟时间。
gate_delay.mode.desc=哪些转换被延迟: \n
latch.toggle_in.desc=触发切换当前输出状态
latch.set_in.desc=触发设置当前输出到高逻辑
latch.reset_in.desc=触发设置当前输出到低逻辑
n-latch.trigger_in1.desc=触发 1
n-latch.trigger_in2and.desc=触发 2,等.
n-latch.gate_out1.desc=当端口中的相应逻辑高电平('+1')接收到最新的触发信号。 否则为低逻辑('0').
n-latch.gate_out2and.desc=相当于门限输出1,等. 
n-latch.count.desc=提供的进出端口对数
\=.exact.desc=Requires the signals to be identical floating-point values, which may prove too stringent when working with two moving signals
\=.table.title=Truth table
\=.table.desc=A       B       =\n0       0       1\n0       1       0\n1       0       0\n1       1       1
≥.table.title=Truth table
≥.table.desc=A       B       ≥\n0       0       1\n0       1       0\n1       0       1\n1       1       1
≤.table.title=Truth table
≤.table.desc=A       B       ≤\n0       0       1\n0       1       1\n1       0       0\n1       1       1
>.table.title=Truth table
>.table.desc=A       B       >\n0       0       0\n0       1       0\n1       0       1\n1       1       0
<.table.title=Truth table
<.table.desc=A       B       <\n0       0       0\n0       1       1\n1       0       0\n1       1       0
≠.exact.title=Exact Mismatches Only [toggle]
≠.exact.desc=Requires the signals to be non-identical floating-point values, which may prove too stringent when working with two moving signals
≠.table.title=Truth table
≠.table.desc=A       B       ≠\n0       0       0\n0       1       1\n1       0       1\n1       1       0
not.signal_in.desc=Signal for inversion
not.table.title=Truth table
not.table.desc=In      NOT\n1       0\n0       1
and.table.title=Truth table
and.table.desc=A       B       AND\n0       0       0\n0       1       0\n1       0       0\n1       1       1
nand.table.title=Truth table
nand.table.desc=A       B       NAND\n0       0       1\n0       1       1\n1       0       1\n1       1       0
or.table.title=Truth table
or.table.desc=A       B       OR\n0       0       0\n0       1       1\n1       0       1\n1       1       1
nor.table.title=Truth table
nor.table.desc=A       B       NOR\n0       0       1\n0       1       0\n1       0       0\n1       1       0
xor.table.title=Truth table
xor.table.desc=A       B       XOR\n0       0       0\n0       1       1\n1       0       1\n1       1       0
xnor.table.title=Truth table
xnor.table.desc=A       B       XNOR\n0       0       1\n0       1       0\n1       0       0\n1       1       1

mix.legacy_interpolation.desc=Module is using original Interpolation style, where Nearest mode divides the Select signal unevenly. Click UPDATE to switch to even divisions.
mix.legacy_interpolation.title=Legacy Spread in Use [click to switch]