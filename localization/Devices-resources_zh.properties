device_general.pitch.desc=设备音高偏移，应用于音符输入
device_general.glide.desc=每个新音符的滑音时间 (从上一音高开始)
device_general.legato.title=Legato模式 [切换]
device_general.legato.desc=仅将滑音应用于重叠的音符
device_general.vel.desc=使用全部音符速度时的可用动态范围
device_general.gain.desc=应用于设备输出的增益 (前置-FX 链)
device_general.pan.desc=乐器输出的立体声声像位置 (前置-FX 链)
device_general.width.desc=处理信号的立体声宽度
device_general.mix.desc=设备输出处的已处理信号量 (与干声信号进入设备混合)
device_general.mix+wet.desc=处理过的信号量，后置湿声/后置 FX 链 (与干声信号进入设备混合)
device_general.out.desc=设备的输出电平
device_general.out+fx.desc=设备的输出电平 (后置-FX 链)

device_general.latency_comp.title=延迟偏移 [以毫秒为单位显示 (样本)]
device_general.latency_comp.desc=样本中的偏移量，其中负值会将音频移到更早的位置
device_general.latency_trainer.title=Train延迟偏移 [触发]
device_general.latency_trainer.desc=自动单击即可找到适当的延迟补偿

device_general.spectrum_resolution.desc=频谱显示的相对分辨率
device_general.spectrum_speed.desc=频谱显示的一般上升/下降时间
device_general.spectrum_tilt.desc=每个连续八度的视觉增强
device_general.spectrum_domain.desc=频率显示域
device_general.spectrum_range_low.desc=最小的振幅显示
device_general.spectrum_range_high.desc=最大的振幅显示
device_general.spectrum_style.desc=每个输入的绘制方法

device_general.note_chain.desc=前置链，用于在设备到达乐器之前插入设备/插件以处理音符(等.)
device_general.fx_chain.desc=FX链，用于插入设备/插件以处理设备的输出
device_general.wet_fx_chain.desc=FX链，仅用于插入设备/插件以处理效果的湿信号 (前置混音旋钮)
device_general.feedback_fx.desc=FX链，用于在效果的反馈回路中插入设备/插件 (前置混音旋钮)
device_general.source_fx_chain.desc=FX链，用于插入设备/插件以处理源注释和音频信号
device_general.pre_fx_chain.desc=FX链，用于插入设备/插件以处理设备的传入音频/音符信号
device_general.post_fx_chain.desc=FX链，用于插入设备/插件以处理效果的输出 (前置混音旋钮)
device_general.audio_sidechain_chain.desc=FX链，用于在分析之前插入设备/插件以处理侧链音频
device_general.hw_cv_out_chain.desc=用于插入硬件CV Out设备的专用链

device_general.audio_path.title=音源
device_general.audio_path.desc=传入音频信号的路径
device_general.audio_in_path.title=音频目的地
device_general.audio_in_path.desc=输出音频信号的路径
device_general.note_path.title=音符源
device_general.note_path.desc=传入音符信号的路径

device_general.modulator.title=Modulator输出
modulator_out.modulator.desc=用于参数的无线控制

device_general.adsr_attack.desc=从当前包络值到100％的上升时间 (在音符上) 
device_general.ahdsr_hold.desc=开始阶段后的保持时间
device_general.ahdsr_decay.desc=保持阶段后的下降时间
device_general.adsr_decay.desc=开始阶段后的下降时间
device_general.adsr_sustain.desc=衰减阶段结束的水平
device_general.adsr_release.desc=从当前包络值到0％的下降时间 (无音符) 
device_general.adsr_velo.desc=使用整个音符速度范围时的可用幅度范围
device_general.adsr_curve.desc=此阶段的斜率 ('0 %' 是线性的)
device_general.adsr_segment_curve.desc=该线段的斜率，其中 '0 %' 是线性的
device_general.feg_modulator.title=滤波器包络发生器 (FEG)  
device_general.feg_modulator.desc=FEG的调制器源，是否要在其他地方应用
device_general.aeg_modulator.title=振幅包络发生器 (AEG)
device_general.aeg_modulator.desc=AEG的调制器源，是否要在其他地方应用

device_general.filter_mode.desc=使用的滤波器类型:
device_general.filter_freq.desc=截止/中心频率
device_general.filter_reso.desc=滤波器部分的共振
device_general.filter_kbt.desc=传入音符信号的音高影响滤波器频率的量
device_general.filter_eg.desc=滤波器EG的滤波器频率调制深度
device_general.filter_pre-gain.desc=滤波前应用的增益
device_general.filter_post-gain.desc=滤波后的增益


#analysis.
analysis.a_channel.desc=显示输入音频的通道:
analysis.b_enable.title=显示轨迹B [切换]
analysis.b_enable.desc=显示轨迹B
analysis.b_channel.desc=显示所选音频的通道:
analysis.b_path.title=轨迹B源
analysis.b_path.desc=轨迹B的输入音频信号的路径
oscilloscope-device.mode.desc=示波器触发模式:
oscilloscope-device.trigger_hold.desc=两次触发之间的最短时间
oscilloscope-device.trigger_level.desc=触发阈值
oscilloscope-device.trigger_slope.desc=应通过阈值的方向
oscilloscope-device.freeze.title=冻结 [切换]
oscilloscope-device.freeze.desc=保持显示器
oscilloscope-device.scale.desc=缩放级别作为轨迹踪迹速度
oscilloscope-device.kbt.desc=缩放级别跟踪最后一个输入音符的音调
oscilloscope-device.kbt_offset.desc=键盘跟踪的半音偏移
oscilloscope-device.gain.desc=此轨迹的增益
oscilloscope-device.link.desc=为轨迹B使用轨迹A的增益设置
oscilloscope-device.display.title=示波器显示
oscilloscope-device.display.desc=轨迹A(橙色)和启用时的轨迹B (蓝色)的幅度域代表
spectrum_analyzer.fall_rate.desc=频谱更新的相对速度，其中'1.00' 被冻结而 '0.00' 非常快
spectrum_analyzer.display.title=频谱显示
spectrum_analyzer.display.desc=轨迹A (蓝色) 和启用时的轨迹B  (橙色) 的频谱


#audio_fx.
audio_fx.wide.desc=反转正确的处理通道以获得更宽广的声音
audio_fx.delay_time.desc=LFO调制之前的延迟长度
audio_fx.feedback.desc=反馈的输出信号量
audio_fx.lfo_wave.desc=LFO使用的波形
audio_fx.lfo_rate.desc=LFO的频率
audio_fx.lfo_depth.desc=LFO调制延迟时间的量
audio_fx.lfo_retrig.desc=每当有新音符到来时重新启动LFO

blur.time.desc=全通单元的延迟时间
blur.feedback.desc=该全通单元的反馈量
blur.display.title=图形界面
blur.display.desc=显示输出音频频谱，以及用于控制每个全通单元的延迟时间 (从左到右) 和反馈 (上和下) 的点
chorus.high_cut.desc=高频开始衰减的截止
chorus.lfo_rphase.desc=LFO调制右声道的相对相移
chorus.display.title=LFO可视化
chorus.display.desc=显示应用于左声道延迟的LFO (白色) 和应用于右声道延迟的相移版本 (红色)
comb.frequency.desc=梳状滤波器的频率 (实现为相应的延迟时间)
comb.display.title=频谱显示
comb.display.desc=显示输出音频频谱，以及用于控制频率 (从左到右) 和双极反馈 (上和下)的点. \n\n阴影频谱表示输入信号。 明亮的曲线显示出站信号。
flanger.feedback_polarity.title=反馈极性
flanger.feedback_polarity.desc=反馈是以原始符号 (+) 还是反向 (-)传递
freq_shifter.range.desc=可用的最大频移，由频移参数缩放
freq_shifter.amount.desc=当前的频移量，乘以 频率范围 参数
freq_shifter.left_right.desc=左声道的频移量 \n\n的偏移量在左右之间，总频移总计为200%。 一些示例设置: \n• '0 %' 是单声道设置，左右声道使用相同的偏移量 (100 %) . \n• '100 %' 在左侧再加上100%，然后从右侧减去100% (余额为200 % 至 0 % ). \n• '50 %' 向左声道增加 50 % ，从右声道减去 50 % (平衡为 150 % 到 50 % ). \n• '-33.33 %' 从左通道减去三分之一 (余额为 66.66 % 至 133.33 % ).
phaser.frequency.desc=主频为级联全通滤波器
phaser.frequency_offset_left.desc=左滤波器通道的频率偏移
phaser.frequency_offset_right.desc=右滤波器通道的频率偏移
phaser.poles.desc=在使用极数，这也大致占峰和凹陷中产生的频谱数量
phaser.low_cut.desc=预相位器，低频开始衰减的截止
phaser.display.title=图形界面
phaser.display.desc=标记为"P" 的可点击圆圈代表初级滤波器频率 (从左至右) 和双极反馈量 (上和下). 当使用左右频率偏移时，也会出现可单击的 "L" 和 "R" 圆圈. \n\n阴影频谱表示输入信号。 明亮的曲线显示出站信号。
pitch_shifter.grain.desc=更改开窗率作为微调控件
ring-mod.path.title=辅助音频源
ring-mod.path.desc=用设备的传入音频调制的音频源
ring-mod.frequency.desc=[当信号源设置为 "振荡器"时] 设置正弦振荡器的频率
ring-mod.gain.desc=调制阶段应用的增益量
rotary.delay_mod.desc=延迟时间调制范围
rotary.amp_mod.desc=音量调节范围
treemonster.pitch.desc=正弦振荡器的调谐偏移
treemonster.threshold.desc=正弦振荡器触发的电平
treemonster.speed.desc=超过/低于阈值时，振荡器淡入/淡出的速度
treemonster.ring.desc=仅在正弦振荡器之间进行交叉推子混合 ('0 %'), 然后对正弦和源音频进行幅度调制 ('50 %'), 最后对这些信号进行环调制 ('100 %')
treemonster.low_freq.desc=频率检测频段的低截止 (使用高通滤波器)
treemonster.high_freq.desc=频率检测频段的高截止 (使用高通滤波器)
treemonster.display.title=图形界面
treemonster.display.desc=阴影频谱表示输入信号。 明亮的曲线显示出站信号。 当前跟踪的音高和水平由移动的十字准线表示. \n\n交叉频率是可点击的垂直线，阈值 是白色的水平线。
tremolo.depth.desc=Amount that the LFO modulates amplitude/volume


#container.
container.gain.desc=应用于设备输出的增益 (后置 FX 链)
container.gain_nofx.desc=增益应用于设备的输出
container.chains.title=层列表
container.chains.desc=每个层均存在的可滚动列表，以及用于从弹出式浏览器添加另一个层的'+' 图标. \n\选择层标题会在其右侧扩展整个设备链。 每一层都可以单独 ('S'), 静音 ('M'), 或使用右侧的增益衰减器调整其电平。 像其他对象一样，可以将层停用，着色并重命名。
container.chains_selector.title=层列表
container.chains_selector.desc=每个层均存在的可滚动列表，以及用于从弹出式浏览器添加另一层的 '+' 图标. \n\n每个标题开头的图标显示该层当前处于活动状态 (圆形) 还是不处于活动状态 (月形). 目标图层的图标显示为黄色. (在手动模式下，通过调制设置的目标层为蓝色。.) \n\n选择层标题会在其右侧扩展整个设备链。 可以使用右侧的增益衰减器调整每一层的电平。 像其他对象一样，可以将层停用，着色并重命名。
container.note_chains.title=层列表
container.note_chains.desc=每个层均存在的可滚动列表，以及用于从弹出式浏览器添加另一层的'+' 图标. \n\n选择层标题会在其右侧扩展整个设备链。 每层的右侧都有一个LED，指示何时输出音符信号。 像其他对象一样，可以将层停用，着色并重命名。
container.selector.title=目标层
container.selector.desc=接收新笔记和音频的层。 在非手动模式下，此层由模式规则设置. \n\n在手动模式下，可以通过以下方式更改活动图层: \n\n• 单击并拖动此处的名称区域, \n\n• 单击最右侧的递增/递减按钮以上/下 ，或 \n\n• 单击下面列表中任何图层标题左侧的实心圆圈. \n\n• 此外，自动化和调制器可以在手动模式下控制活动层 (名称用作调制器目标). \n\n从一层切换到另一层时，上一层的所有音符/音频会一直持续到完成为止，以实现无缝过渡. (仅当处理完成时，先前的层才关闭.)
container.selector_mode.title=语音模式 [各种选项]
container.selector_mode.desc=如何控制目标层:
container.selector_channel_all.title=所有通道[切换]
container.selector_channel_all.desc=[在按键开关，CC或程序更改模式下时] 是否使用所有MIDI通道上的信号
container.selector_channel_single.title=MIDI 通道 [1 至 16]
container.selector_channel_single.desc=[在按键开关，CC或程序更改模式下时] 如果未设置为全部，则使用哪个MIDI通道
container.selector_base_key.title=基本按键开关 [0 至 127]
container.selector_base_key.desc=请注意，这将切换到第一层。 后续注释将用于所有其他层。 例如，如果设置为具有三层的C0: \n• C0将切换到第1层. \n• C#0 将切换到第2层. \n• D0 将切换到第3层. \n\n注意: 用作按键开关不会触发声音。
container.selector_cc.title=控制变更讯息 [0 至 127]
container.selector_cc.desc=控制更改消息，其整个范围在当前层之间划分. \n\n例如，如果将CC1 (mod wheel) 设置为四层，则值: \n• 0-31 将切换到第1层. \n• 32-63 将切换到第2层. \n• 64-95 将切换到第3层. \n• 96-127 将切换到第4层.
container.selector_midi_learn.title=MIDI学习[切换]
container.selector_midi_learn.desc=根据下一个到达的MIDI消息设置通道和其他与模式相关的数据
container.x_control.desc=当前的X位置， A–C 和 B–D 链之间的淡入淡出
container.y_control.desc=当前的Y位置， A–C 和 B–D 链之间的淡入淡出
container.x_modulator.desc=如果要在其他位置应用当前X位置的调制器源
container.y_modulator.desc=如果要在其他位置应用当前Y位置的调制器源
container.low_chain.desc=用于插入设备/插件以处理低频段的链
container.mid_chain.desc=用于插入设备/插件以处理中频带的链
container.high_chain.desc=用于插入设备/插件以处理高频段的链
container.low_gain.desc=低频的后置链增益
container.mid_gain.desc=中频的后置链增益
container.high_gain.desc=高频的后置链增益

chain.chain.title=链设备 链
chain.chain.desc=用于插入各种类型的设备/插件，轻松保存为信号流预设
drum_machine.chain_scroll.title=鼓链滚轮
drum_machine.chain_scroll.desc=滚动浏览整个单元格 (每个音符一个), 一次可编辑16个
drum_machine.chain_grid.title=鼓链单元
drum_machine.chain_grid.desc=空单元格由触发器注释列出 (双击以填充). \n\n被占用的链会可视化其设备数量，并且可以预览 (播放), S(独奏), and M(静音). \n\n注意: 右键单击任何一个单元以设置扼流圈关系，其中多个单元 (如 hi-hats) 一次只允许一个成员发声.
drum_machine.channel_pan.title=选定的链平移 [±100 %]
drum_machine.channel_pan.desc=选定链的立体声平移位置
drum_machine.channel_volume.title=选定的链条数量e [-∞ dB to +6.0 dB]
drum_machine.channel_volume.desc=所选链的数量 (和后置meter)
drum_machine.channel_solo.title=选定的独奏链[切换]
drum_machine.channel_solo.desc=所选链的独奏状态
drum_machine.channel_mute.title=所选链的静音[切换]
drum_machine.channel_mute.desc=所选链的静音状态
drum_machine.hide_detail=隐藏内部返回
drum_machine.show_detail=显示内部返回
#fx_layer
fx_selector.note_path.title=音符/MIDI来源
fx_selector.note_path.desc=传入音符和MIDI信号的路径
#instrument_layer
#instrument_selector
mid-side_split.mid_chain.desc=用于插入设备/插件以处理传入音频信号的中间部分的链
mid-side_split.side_chain.desc=用于插入设备/插件以处理输入音频信号的侧面部分的链
mid-side_split.mid_gain.desc=应用于音频中间部分的增益，然后再将其转换回左右信号
mid-side_split.side_gain.desc=在将音频转换回左右信号之前，将其应用于音频的侧面部分
multiband_fx-2.crossover.desc=高低频段相遇的频率
multiband_fx-3.low_freq.desc=中低频段相遇的频率
multiband_fx-3.high_freq.desc=中高频段相遇的频率
multiband_fx-3.display.title=图形界面
multiband_fx-3.display.desc=每个频段都有一个彩色圆圈 (低频段为红色，中频段为黄色，高频段为蓝色)可视化，可以上下拖动以更改该频段的增益。 低频段和高频段也可以左右拖动，以调整相应的交叉频率。
#note_fx_layer
#note_fx_selector
replacer.filter_mode.desc=使用的滤波器类型，预检测:
replacer.filter_freq.desc=分析滤波器的频率
replacer.filter_q.desc=分析滤波器的共振
replacer.filter_monitor.desc=将分析滤波器直接路由到设备的音频输出，以进行调整
replacer.threshold.desc=发送到设备链的音符开启和关闭的级别
replacer.tolerance.desc=阈值区域的宽度，超过高阈值时发送音符开，而低于低阈值时发送音符关
replacer.hold.desc=在将音符取消发送到设备链之前，信号必须降至阈值区域以下的时间
replacer.note_pitch.desc=音调发送到设备的链中
replacer.note_velocity.desc=注意发送到设备链中的速度 \n\n注意: 这可以进行调制。
replacer.chain.desc=用于插入设备/插件的链，该设备/插件将接收设备生成的注释以及随后的任何音频处理
replacer.display.title=图形界面
replacer.display.desc=显示输入的音频信号 (后置滤波器), 以及设置的检测阈值处的可拖动蓝线，显示检测范围的其他可视线以及可视化音符打开 (高) 或音符关闭 (低) 的红线 已经送走了
stereo_split.left_chain.desc=用于插入设备/插件以处理左侧传入音频信号的链
stereo_split.right_chain.desc=用于插入设备/插件以处理正确的传入音频信号的链
stereo_split.left_gain.desc=增益应用于左声道
stereo_split.right_gain.desc=增益应用于右声道
xy.chains.desc=混合网格此象限的完整设备链
xy.interface.title=图形界面
xy.interface.desc=可点击的圆圈 ("M") 既可控制并可视化当前混合位置
#xy_fx
#xy_instrument

#container-legacies.
audio_mod.legacy.title=注意: 旧版设备
audio_mod.legacy.desc=包含此Bitwig v1设备是为了与旧项目兼容。 这些较旧的MOD设备已由调制器代替，可以通过调制器窗格将其添加到任何设备或插件中. \n\n当前相关设备: \n• 音频速率调制器 \n• 音频侧链调制器 \n• 包络跟随器调制器 \n• HW CV 输入调制器
lfo_mod.legacy.title=注意: 旧版设备
lfo_mod.legacy.desc=包含此Bitwig v1设备是为了与旧项目兼容。 这些较旧的MOD设备已由调制器代替，可以通过调制器窗格将其添加到任何设备或插件中. \n\n当前相关设备: \n• LFO 调制器 \n• Beat LFO 调制器 \n• 经典LFO 调制器
note_mod.legacy.title=注意: 旧版设备
note_mod.legacy.desc=包含此Bitwig v1设备是为了与旧项目兼容。 这些较旧的MOD设备已由调制器代替，可以通过调制器窗格将其添加到任何设备或插件中. \n\n当前的相关设备: \n• 表达式调制器 \n• MIDI 调制器 \n• Keytrack 调制器 \n• 注意侧链调制器
step_mod.legacy.title=注意: 旧版设备
step_mod.legacy.desc=包含此Bitwig v1设备是为了与旧项目兼容。 这些较旧的MOD设备已由调制器代替，可以通过调制器窗格将其添加到任何设备或插件中. \n\n当前相关设备: \n• 步进调制器 \n• ParSeq-8 调制器


#delay-devices.
delay-devices.mode.desc=启用后，在16分音符中设置延迟时间
delay-devices.time.desc=基于时间的延迟时间，在16分音符模式下设置开关关闭时使用
delay-devices.beats.desc=延迟时间使用的16分音符数量
delay-devices.beat_offset.desc=将延迟时间缩放为稍长 (正值) 或更短 (负值)
delay-devices.low_cut.desc=低频开始衰减的截止
delay-devices.high_cut.desc=高频开始衰减的截止
delay-devices.feedback.desc=反馈的输出信号量
delay-devices.crossfeed.desc=馈入另一个延迟单元的输出信号量
delay-devices.meter.title=电平表
delay-devices.meter.desc=此单元输出信号

#delay-1
delay-2.input.desc=要处理的传入信号:
delay-2.rate.desc=LFO速度用于延迟时间调制
delay-2.detune.desc=延迟时间调制量 (左右声道随时反向应用)
delay-2.right_unit.title=右单元 [部分]
delay-2.right_unit.desc=右单元提供设备的右输出通道，就像左单位提供左。 否则，它们在功能上是相同的。
delay-4.gain.desc=此单元的内部电平 (在前置FX链之后)
delay-4.send.desc=发送电平到另一个单元
delay-4.sends.title=发送 [-∞ dB 至 0.0 dB]
delay-4.sends.desc=发送电平到其他单元
delay-4.volume.desc=此单元到音频总线的电平
delay-4.pan.desc=此单元的立体声声像位置
delay-4.global_gain.desc=所有输入增益，发送和反馈电平的相对增益定标器
delay-4.units.title=单元 2, 3 & 4 [部分]
delay-4.units.desc=所有单元在功能上都是相同的


#destruction.
amp.clipping_mode.desc=剪辑模型中使用:
amp.clipping_bias.desc=剪辑阶段的不对称量
amp.clipping_sag.desc=信号中的骤降量，可模拟电子管对大瞬态的响应
amp.clipping_drive.desc=剪辑阶段使用的增益
amp.clipping_stereo.desc=使剪辑成为完全立体声操作
amp.cabinet_width.desc=机柜的仿真尺寸，从一边到另一边
amp.cabinet_height.desc=机柜的仿真尺寸，从底部到顶部
amp.cabinet_depth.desc=机柜的仿真尺寸，从前部到后部
amp.cabinet_reflect.desc=机柜型号中回音的数量
amp.cabinet_phase.desc=反转机柜的相位
amp.cabinet_hue.desc=正在使用的机柜型号
amp.cabinet_color.desc=机柜色调在使用中注入的“字符”数量
amp.cabinet_mix.desc=进入后均衡器部分输入的受机柜影响的信号量
amp.gain.desc=应用增益，后置剪辑
bit-8.clock_rate.desc=采样率
bit-8.clock_jitter.desc=插入时钟频率的波动量
bit-8.clock_chance.desc=可以听到的样本百分比（随机选择）
bit-8.gate.desc=每个样品要通过的阈值
bit-8.shape_rect.desc=信号整流模式:
bit-8.shape_mode.desc=剪辑类型:
bit-8.shape_drive.desc=剪辑前应用的增益量
bit-8.quantize_mode.desc=量化类型:
bit-8.quantize_level.desc=底噪声量化
bit-8.quantize_mode.desc=量化算法:
bit-8.quantize_squared.desc=在平方域中执行量化
bit-8.quantize_brightness.desc=扩散算法的误差扩散量
bit-8.quantize_noise.desc=抖动算法的立体声噪声
distortion.drive.desc=在失真段开始时应用的增益
distortion.slew.desc=最大过渡速度，设置为分贝值。 较高的级别等效于更快的过渡，而较低的值会使事情变慢。
distortion.symmetry.desc=变形曲线的对称性
distortion.dc.desc=失真曲线之后施加的相对信号偏移
distortion.pre_freq.desc=预失真钟形滤波器的中心频率
distortion.pre_q.desc=Q /陡度用于前置失真钟滤波器
distortion.pre_gain.desc=前置失真钟形滤波器的增益
distortion.post_low.desc=低频后开始衰减的截止点，后置失真
distortion.post_high.desc=截止其中较高频率开始衰减，后置失真
distortion.display.title=图形界面
distortion.display.desc=可点击的黄色圆圈代表前置失真滤镜。 按住修饰键时，拖动它可更改中心频率 (从左到右) 和增益 (上和下) — 或 Q (上和下)  后置失真低切 (红色) 和高剪切 (蓝色) 的频率是可点击的为好. \n\n阴影频谱表示输入信号。 明亮的曲线显示出站信号。
saturator.transfer_graph.title=曲线显示
saturator.transfer_graph.desc=通常从当前设置应用传递功能，当前输入电平以白色显示. \n\n在整个界面中，正振幅显示为黄色，负振幅显示为橙色.
saturator.normalize.desc=将Drive参数限制为最大输出1 (通过补偿Makeup Gain)
saturator.output.desc=输出增益 \n\n注意: 启用标准化后，此参数仍然可用，但显示最终应用的增益量。
saturator.drive.desc=处理前套用的收益金额
saturator.cutoff.desc=仅适用于饱和信号的低通滤波器的截止
saturator.slope.title=后置低通 Slope 和 Flavor
saturator.slope.desc=低通滤波器的陡度 (pole count) . "G" 模式更柔，和 "R" 模式则更富挑战性。
saturator.quiet_threshold.desc=施加“安静阈值”的电平，然后随着信号变得更安静而继续
saturator.loud_threshold.desc=应用响亮阈值的电平，然后随着信号变大而继续
saturator.loud_threshold_skew.desc=将响度阈值应用于正负振幅的方式的差异
saturator.quiet_knee.desc=应用“安静阈值”的过渡宽度
saturator.loud_knee.desc=应用响亮阈值的过渡宽度
saturator.loud_knee_skew.desc=响度Knee应用于正负振幅的方式不同
saturator.quiet_ratio.desc=以“安静阈值”缩放信号
saturator.loud_ratio.desc=以响亮阈值值缩放信号
saturator.loud_ratio_skew.desc=将响度比应用于正负振幅的方式不同 \n\n注意: 对于所有偏斜参数，正值强调正振幅，负偏值强调负振幅。
saturator.interface.title=交互式可视化
saturator.interface.desc=传入信号在水平方向显示，带有动画白条。 输出曲线以黄色 (正值) 和橙色 (负值具有不同的偏斜度). \n\nL(oud) 和 Q(uiet) 阈值以及Knee参数的相应范围点均可单击。 在任一界面项上垂直拖动可更改其比率。
saturator.hide_detail=隐藏曲线编辑器
saturator.show_detail=显示曲线编辑器

#drum.
e-clap.decay.desc=噪音衰减时间
e-clap.repeat_distance.desc=连续两次触发之间的时间，重复持续时间
e-clap.repeat_duration.desc=以重复间隔重新触发的期间
e-clap.width.desc=噪音的立体声宽度
e-clap.cutoff.desc=低通滤波器的截止频率
e-clap.reso.desc=低通滤波器的谐振
e-cowbell.osc1pitch.desc=振荡器1的频率
e-cowbell.osc2offset.desc=相对于振荡器1调整振荡器2
e-cowbell.osc_kbt.desc=使用振荡器的传入音符的音高 (而不是音高设置)
e-cowbell.osc_blend.desc=交叉渐变器仅从振荡器1 ('0 %') 到振荡器2('100 %'), 并且介于两者之间
e-cowbell.cutoff.desc=带通滤波器的截止频率 (在发生器部分之后，在环形调制之前)
e-cowbell.reso.desc=带通滤波器的谐振
e-cowbell.ring_frequency.desc=正弦振荡器的频率，通过滤波后的发生器部分输出进行环形调制
e-cowbell.ring_mix.desc=发送到设备输出的环形调制信号的数量 (与干声输入混合)
e-cowbell.attack.desc=振幅开始时间
e-cowbell.decay.desc=振幅衰减时间
e-hat.attack.desc=振幅开始时间
e-hat.decay.desc=振幅衰减时间
e-hat.decay_curve.desc=幅度衰减曲线
e-hat.comb_frequency.desc=处理白噪声发生器的梳状滤波器的频率/延迟时间
e-hat.comb_feedback.desc=梳状滤波器的反馈设置
e-hat.comb_mix.desc=发送到与FM Hit部分混合的梳状滤波信号的数量 (混有干噪)
e-hat.cutoff.desc=高通滤波器的截止频率(将“ Comb”和“ FM Hit”部分混合后出现)
e-hat.reso.desc=高通滤波器的谐振
e-hat.display.title=图形界面
e-hat.display.desc=红圈控制Comb ("C") 滤波器的频率和混合设置。 黄色圆圈控制FM Hit部分的调制 ("M") 振荡器的频率和强度。 黄色圆圈控制FM Hit部分的调制 ("M") 振荡器的频率和强度。 蓝色圆圈控制FM Hit ("H") 部分的载波频率和混音设置。 橙色垂直线控制高通滤波器的截止频率。
e-hat.fm_decay.desc=FM Hit部分的衰减时间
e-hat.fm_carrier_frequency.desc=载频
e-hat.fm_modulator_frequency.desc=调制器频率
e-hat.fm_modulator_amount.desc=FM Hit部分的调制深度/索引
e-hat.fm_mix.desc=FM Hit信号的数量 (与Comb部分的输出混合),发送到高通滤波器
e-hat.width.desc=噪音的立体声宽度
e-kick.osc_decay.desc=振荡器的衰减时间
e-kick.osc_tune.desc=振荡器频率
e-kick.click.desc=通过短暂地将振荡器的频率加倍来增加影响
e-kick.osc_tone.desc=低通滤波器的截止频率
e-kick.pitch_mod_amount.desc=最大音高调制
e-kick.pitch_mod_curve.desc=音调衰减曲线
e-kick.pitch_mod_time.desc=音调衰减时间
e-snare.osc1tune.desc=振荡器1的频率
e-snare.osc1decay.desc=振荡器1的衰减时间
e-snare.osc2offset.desc=相对于振荡器1调整振荡器2
e-snare.osc2decay.desc=振荡器2的衰减时间，相对于振荡器1的衰减设置
e-snare.noise_attack.desc=噪声发生器的开始时间
e-snare.noise_decay.desc=噪声发生器的衰减时间
e-snare.noise_decay_curve.desc=噪声发生器的衰减段的斜率，其中'0 %' 是线性的，正值施加对数类型的曲线，负值施加指数性的曲线
e-snare.noise_width.desc=噪声发生器的立体声宽度
e-snare.osc_level.desc=交叉渐变器仅从振荡器1('0 %') 到振荡器2 ('100 %'), 并且介于两者之间
e-snare.noise_level.desc=噪声发生器的水平
e-snare.high_cut.desc=低通滤波器的频率 (处理混合输出)
e-snare.low_cut.desc=高通滤波器的频率 (处理噪声发生器)
e-snare.q.desc=低通和高通滤波器的谐振
#e-tom SHARED WITH E-KICK


#dynamic.
dynamic.input.desc=应用于输入信号的增益量
dynamic.mode.desc=使用平均技术:
dynamic.sidechain_path.title=音频侧链源
dynamic.sidechain_path.desc=输入音频侧链信号的路径，用于设备的分析部分
dynamic.output_meter.title=输出仪表
dynamic.output_meter.desc=外发信号
dynamic.reduction_amount.title=增益降低
dynamic.reduction_amount.desc=当前应用的压缩量

compressor.threshold.desc=高于压缩电平
compressor.ratio.desc=应用的压缩量. \n\n例如,  '4.00:1'的比率表示输入信号增加4dB只会导致输出增加1dB。因此，较大的值表示更多的增益降低。
compressor.attack.desc=从无压缩到完全增益降低的过渡时间 (输入超过阈值时)
compressor.release.desc=从全增益降低到无压缩的过渡时间 (当输入低于阈值时)
compressor.output.desc=在输出端应用的增益量
compressor.makeup.desc=根据阈值和比率设置应用其他增益
compressor.input_meter.title=输入仪表
compressor.input_meter.desc=传入信号，蓝线有阈值控制
compressor.combo_meter.title=历史显示
compressor.combo_meter.desc=从下至上显示: \n• 传入信号 (亮灰色) \n• 压缩信号 (暗灰色) \n• S信号衰减量 (蓝色)
de-esser.frequency.desc=高通滤波器的截止频率 (前置分析)
de-esser.mode.desc=分析过滤器的模式:
de-esser.monitor.desc=将分析滤波器直接路由到设备的音频输出，以进行调整
de-esser.amount.desc=触发分析部分时应用于整个信号的相对增益降低量
de-esser.meter.title=增益降低仪表
de-esser.meter.desc=显示当前应用的增益减少量
dynamics.ratio_low.desc=所应用的增益减少/扩展量. \n\n例如,  '2.00:1'的比率表示输入端1dB的变化将表示输出端2dB的变化。比率为'1:4.00'意味着输入信号增加4dB只会导致输出增加。
dynamics.threshold_low.desc=低于此级别的压缩/扩展
dynamics.knee_low.desc="knee"分布在较低阈值周围的范围，较高的值表示较大的，渐进的范围
dynamics.ratio_high.desc=所应用的增益减少/扩展量. \n\n例如, '1:4.00'的比率表示输入信号增加4dB只会导致输出增加1dB。'2.00:1'的比率意味着输入的1dB变化将表示为输出的2dB变化。
dynamics.threshold_high.desc=进行压缩/扩展的水平
dynamics.knee_high.desc="knee"分布在较高阈值周围的范围，较高的值表示较大的，渐进的范围
dynamics.attack.desc=输入信号超过任一阈值时的过渡时间
dynamics.release.desc=输入信号低于任一阈值时的过渡时间
dynamics.sidechain_gain.desc=应用于分析输入的收益
dynamics.display1.title=互动回应显示
dynamics.display1.desc=将响应曲线显示为橙色线，白色迹线显示当前信号电平(考虑了“开始”和“释放”时间). 两个阈值级别均具有深蓝色背景，可以将其从左向右拖动。 曲线的远端可以上下拖动以调整每个比率。
dynamics.display2.title=历史显示
dynamics.display2.desc=显示输入信号(灰色)以及增益减少/扩展的量(蓝色)。 单击此显示将冻结它，直到再次单击。
dynamics.meters.title=Combo仪表
dynamics.meters.desc=从左至右显示: \n• 分贝标度，当前上下限处有两条红线 \n• 传入信号仪表 \n• 信号衰减量 (蓝色) \n• 传出信号仪表
gate.threshold.desc=禁用该电平以上的增益降低功能
gate.depth.desc=最大增益降低量
gate.attack.desc=从全增益降低到无增益的过渡时间 (输入超过阈值时)
gate.release.desc=从无增益减小到最大减小的过渡时间 (输入低于阈值时)
gate.display.title=历史显示
gate.display.desc=显示输入信号 (灰色) 和减少的增益量 (蓝色)。单击此显示将冻结它，直到再次单击。
gate.meters.title=Combo仪表
gate.meters.desc=从左至右显示: \n• 分贝标度，当前阈值处有一条红线\n•传入信号仪表 \n• 信号衰减量(蓝色) \n• •传出信号仪表
peak_limiter.ceiling.desc=设备允许的最大级别； 超过此水平的输入幅度 (后置输入增益) 将参与限制
peak_limiter.release.desc=从全增益降低到无限制的过渡时间(当输入低于“上限”时)
peak_limiter.input_meter.title=输入仪表
peak_limiter.input_meter.desc=传入信号，蓝线控制顶部
peak_limiter.combo_meter.title=历史显示
peak_limiter.combo_meter.desc=从下至上显示: \n• 传入信号(亮灰色) \n• 受限信号 (暗灰色) \n• 信号衰减量 (蓝色)
transient_control.attack_modulator.title=开始调制器
transient_control.attack_modulator.desc=受其时间控制影响的检测到攻击信号的调制器源
transient_control.attack_gain.desc=检测到攻击后，将增益应用于设备的传入音频信号
transient_control.attack_time.desc=应用增益后的衰减时间
transient_control.sustain_modulator.title=延音调制器
transient_control.sustain_modulator.desc=受其时间控制影响的检测到的维持信号的调制器源
transient_control.sustain_gain.desc=检测到延音时，将增益应用于设备的传入音频信号
transient_control.sustain_time.desc=应用增益之前的开始时间
transient_control.displays.title=双重显示
transient_control.displays.desc=顶部显示屏显示检测到的起音 (黄色) 和延音 (紫色) 信号。每个参数都受其“时间”参数影响. \n\n底部显示屏显示设备的输入信号 (灰色)，其中应用了减少/扩展的增益量(蓝色). \n\n单击任一显示将冻结它，直到再次单击为止。
gate.meters.title=Combo仪表


#eq.
eq.enable.desc=激活滤带
eq.mode.desc=该频段的可用模式:
eq.gain.desc=可设置增益钟和倾斜滤波器
eq.frequency.desc=该频段的中心/截止频率
eq.reso.desc=该频段的陡度/共鸣
eq.display.title=图形界面
eq.display.desc=每个带由一个标记的圆圈表示。 单击并拖动以更改其频率和增益，右键单击以更改其模式，或者在悬停时使用滚轮/触控板滚动仅调整频段的Q。有关其他修改器选项，请参见窗口页脚. \n\n阴影频谱表示输入信号。 明亮的曲线显示出站信号。

eq+.display.title=图形界面
eq+.display.desc=每个带模式分配的频段都用一个标记的圆圈表示。 单击并拖动以更改其频率和增益(或Q),右键单击以更改其模式，或在悬停时使用滚轮/触控板滚动仅调整频段的Q. \n\n手势包含(悬停时有相应的光标): \n\n• 单击滤波器曲线以激活频段. \n• 单击底部边缘有一个缺口. \n• 单击最左边的曲线以获取低货架. \n• 单击最右边的曲线以获得高货架. \n• 单击最左边的区域以进行高通. \n• 单击最右边的区域以进行低通. \n• 双击曲线以创建钟形. \n• 双击任何频段以将其禁用.
eq+.global_gain.desc=调整设备输出的增益
eq+.adaptive-q.desc=根据其增益按比例调整每个频段的Q设置
eq+.mode.desc=设备使用的过采样量:
eq+.band_solo.desc=在聚焦的频段周围放置一个带通滤波器以进行试听\n\n注意: 在图形界面中拖动选定频段旁边的手柄 (↔) 将启用独奏功能，直到释放鼠标为止。
eq+.band_selector.desc=专注于哪个频段
eq+.display_range.desc=图形界面的垂直显示范围
eq+.inspector_bands.title=每频段控制[适用于频段1至8]
eq+.inspector_bands.desc=对于每个具有模式分配的活动频段，将显示以下元素: \n\n• 启用开关 (电源图标) \n• 滤波器模式 \n• 频率 \n• 增益 \n• Q
eq+.display_pre.title=显示传入频谱 [切换]
eq+.display_pre.desc=输入的音频是否可视化 (作为阴影频谱)
eq+.display_post.title=显示呼出频谱 [切换]
eq+.display_post.desc=输出的音频是否可视化 (明亮的曲线)
eq+.show_analyzer=显示分析仪设置
eq+.select_band_1=选择 频段 1
eq+.select_band_2=选择 频段 2
eq+.select_band_3=选择 频段 3
eq+.select_band_4=选择 频段 4
eq+.select_band_5=选择 频段 5
eq+.select_band_6=选择 频段 6
eq+.select_band_7=选择 频段 7
eq+.select_band_8=选择 频段 8
eq+.reference_chooser.title=参考音频源
eq+.reference_chooser.desc=音频源在显示屏上显示为紫色曲线
#eq-2
eq-5.mode1.desc=频段 1 的可用模式:
eq-5.mode_middle.desc=频段 2、3和4的可用模式:
eq-5.mode5.desc=频段 5 的可用模式:
eq-5.amount.desc=缩放所有频段的增益设置，调节效果
eq-5.shift.desc=偏移所有频段的频率设置
eq-5.display.desc=图形编辑器中的可视化:
eq-dj.gain.desc=应用于该频段的收益
eq-dj.low_freq.desc=中低频段相遇的频率
eq-dj.high_freq.desc=中高频段相遇的频率
eq-dj.interface.title=图形界面
eq-dj.interface.desc=每个频率都以不同的颜色显示(低频率为红色，中频率为黄色，高频率为蓝色)。交叉频率是可点击的垂直线。


#filter.
filter-device.display.title=频谱显示
filter-device.display.desc=显示输出的音频频谱，以及控制频率 (从左到右)和共鸣(上和下)的点. \n\n阴影频谱表示输入信号。明亮的曲线显示出站信号。

ladder.amount_adsr.desc=ADSR(包络)调制滤波器的深度 
ladder.amount_lfo.desc=LFO调制滤波器深度的频率
ladder.amount_ef.desc=深度包络跟随调制滤波器频率
ladder.adsr_path.title=门限源
ladder.adsr_path.desc=注意触发信封的路径
ladder.lfo_wave.desc=LFO使用的波形
ladder.lfo_retrig.desc=在每个音符触发器上重新启动LFO波形
ladder.lfo_rate.desc=LFO的频率
ladder.lfo_phase.desc=抵消LFO的阶段
ladder.ef_attack.desc=转换速度提高电平
ladder.ef_release.desc=转换速度电平降低
resonator_bank.frequency.desc=每个波段的二极带通滤波器的中心频率
resonator_bank.reso.desc=每个频段的滤波器的谐振
resonator_bank.gain.desc=每个频段的增益
resonator_bank.global_frequency.desc=中心频率偏移适用于所有频段
resonator_bank.global_reso.desc=共振偏移适用于所有频段
resonator_bank.global_gain.desc=增益缩放器适用于所有频段
resonator_bank.kbt.desc=传入音符信号的音高会影响所有频段的中心频率 \n\n注意: 如果此设备在音频轨道上，则可以在其前面插入一个Note Receiver设备。
resonator_bank.glide.desc=启用键盘跟踪的新音符到达时，频段偏移的过渡时间
resonator_bank.display.title=图形界面
resonator_bank.display.desc=每个滤波器带的编号圆，控制中心频率 (从左到右)和增益(上和下). \n\n阴影频谱表示输入信号。 明亮的曲线显示出站信号。
vocoder.modulator_chain.desc=FX链处理/替换设备的输入信号，其频谱经过分析并注入到载波中
vocoder.gain.desc=Post-链路增益
vocoder.monitor.desc=在设备输出端直接监控此链(后置增益)
vocoder.interface.title=频谱显示
vocoder.interface.desc=交互式显示屏，显示载波(黄色)和调制器(蓝绿色)频谱以及湿输出(白色). \n\n可调的垂直线，用于最低(红色)和最高(蓝色)带通频率。 可调水平线(均为紫色)显示较低的楼层和较高的天花板水平。
vocoder.floor.desc=扩展器阈值水平，低于此水平的信号逐渐衰减
vocoder.ceiling.desc=限制器阈值水平，高于此水平的信号被压缩以保持低于水平
vocoder.low_frequency.desc=最低带通滤波器的中心频率(在“调制器”和“载波”部分匹配)
vocoder.high_frequency.desc=最高带通滤波器的中心频率(在“调制器”和“载波”部分匹配)
vocoder.formant.desc=共振峰移位，应用于分析侧
vocoder.brightness.desc=重新平衡频谱，强调高端(设置为正值时)或低端(负值)
vocoder.band_width.desc=每个构造的带通滤波器的相对宽度控制，其值越大，范围越广
vocoder.stereo.desc=两个部分都使用的通道:
vocoder.bands.title=频率数量 [8, 16, 24 … 80]
vocoder.bands.desc=在“调制器”(分析)和“载波”(处理)部分中找到的滤波器带数
vocoder.shape.desc=使用的带通的聚焦:
vocoder.attack.desc=提高频段电平的过渡速度
vocoder.release.desc=降低频段电平的过渡速度
vocoder.freeze.desc=将所有调制器频段保持在当前电平
vocoder.carrier_chain.desc=乐器/ FX链，提供使用调制器频谱过滤的信号


#hardware.
hw_clock_out.mode.desc=同步模式用于这个单元:
hw_clock_out.path.title=同步目的地
hw_clock_out.path.desc=同步信号的音频目的地
hw_clock_out.count.desc=触发器之间的节拍数(以速率单位为单位)
hw_clock_out.rate_unit.desc=对于时钟频率基本单元:
hw_clock_out.pulse_length.desc=每个触发器的正持续时间:
hw_clock_out.display.title=输出图表[显示]
hw_clock_out.display.desc=最新触发信号的范围 \n\n注意: 同步信号非常快，每个触发都可能不可见。
hw_clock_out.trigger.desc=单击发送触发信号
hw_clock_out.groove.desc=适用运输的槽(启用)时钟模式
hw_clock_out.gate.desc=[当两个单元都处于时钟模式时]选通第一单元的输出，直到第二单元触发
hw_clock_out.unit_two.title=第二单元
hw_clock_out.unit_two.desc=除Gate设置外，其他参数与第一个单元相同
hw_cv_instrument.ac.desc=切换到交流(AC)模式下，对于未DC耦合接口
hw_cv_instrument.pitch_cv_out.title=音高CV目的地
hw_cv_instrument.pitch_cv_out.desc=CV音调信号的音频目标
hw_cv_instrument.gate_out.title=Gate目的地
hw_cv_instrument.gate_out.desc=音频目的地门限(note on/off) 信号
hw_cv_instrument.gate_level.desc=获得输出门限信号
hw_cv_instrument.gate_invert.desc=翻转门限信号的状态
hw_cv_instrument.mode.desc=音调如何调整:
hw_cv_instrument.auto_tune.desc=单击将启动自动调整协议
hw_cv_instrument.manual_root.desc=中心注释，应在其中发送零值
hw_cv_instrument.manual_range.desc=范围缩放器，以八度为单位 (上和下)
hw_cv_out.value.desc=以CV的形式发送电平。 旋转旋钮可正常工作，但是分配自动化/调制器可能更好。
hw_cv_out.path.title=CV目的地
hw_cv_out.path.desc=音频目的地CV信号
hw_cv_out.smooth.desc=延迟时间应用于输出CV信号
hw_cv_out.display.title=输出图表[显示]
hw_cv_out.display.desc=最近的CV值范围
hw_fx.out_gain.desc=增益应用到所述输出音频
hw_instrument.note_path.title=音符目的地
hw_instrument.note_path.desc=传出音符和MIDI信号的路径
hw_instrument.note_channel.desc=是否传出消息使用他们的信道 ('保留 Ch.'),或路线的所有消息到特定的信道
hw_instrument.note_clock.desc=发送MIDI时钟设定的路径
hw_instrument.note_mpe.desc=当启用时，信道被动态分配和用于所述一组弯音范围
hw_instrument.note_pb_range.desc=在MPE模式下，使用的弯音范围
hw_instrument.gain.desc=增益应用于返回的音频


#keyboard.
organ.drawbars.title=谐波牵引杆[音量滑块]
organ.drawbars.desc=Controls in organ order (from left to right): \n• Down an octave (16') \n• The fifth (5⅔') \n• The fundamental (8') \n• The octave (4') \n• An octave + a fifth (2⅔') \n• Two octaves (2') \n• Two octaves + a major third (1⅗') \n• Two octaves + a fifth (1⅓') \n• Three octaves (1')
organ.model.desc=每个谐波使用的波:
organ.retrigger.desc=使每个谐波触发从零开始，产生更平滑的声音
#organ.sub
#organ.5
#organ.fundamental
#organ.8
#organ.12
#organ.15
#organ.17
#organ.19
#organ.22


#midi.
midi.led.title=信息指示灯[LED]
midi.led.desc=当该信道上接收到消息闪烁
midi.channel.desc=MIDI通道用于所有生成的消息 \n\n注意: 通过设备传递的MIDI消息不受影响
midi.auto_send.desc=启用后，所有指定的消息被发送时的主要价值变动
midi.send_now.desc=可点击的触发器，用于发送所有指定的MIDI消息

channel_filter.button.title=选择通道[切换]
channel_filter.button.desc=可点击的按钮。 启用后，它显示为亮白色，并允许通过此通道的消息通过。
channel_map.value.title=重映射通道 [1 至 16]
channel_map.value.desc=可拖动的值。 设置此传入通道上收到的消息的目标通道。 (发生重映射时，仅显示为亮白色。)
midi_cc.knob.desc=对于定义的控制器(CC)发送的值
midi_cc.cc.desc=控制器消息，该值将被发送到
midi_cc.label.title=用户标签[文字]
midi_cc.label.desc=对于任何已配置的旋钮可选标签(与一组控制器)
midi_cc.flush.desc=单击以按顺序发送所有已配置旋钮的当前值
midi_program_change.program.desc=程序更改消息 \n\n注意: 仅当音频引擎加载了项目，按下“立即发送”按钮或更改了值时，才发送程序更改消息(以及所有启用的库选择消息)启用自动发送选项
midi_program_change.msb_on.desc=发送一个bank选择消息(CC 0)与每个程序变更信息
midi_program_change.lsb_on.desc=发送一个bank选择消息(CC 32)与每个程序变更信息
midi_program_change.msb_value.desc=将作为MSB被发送bank选择消息(CC 0)
midi_program_change.lsb_value.desc=将作为LSB被发送bank选择消息(CC 32)
midi_program_change.chain.title=链设备链
midi_program_change.chain.desc=为了插入所有类型的设备/插件，以隔离程序更改/库选择消息，或在发送这些消息时使用“防点击”功能
midi_program_change.chain_only.desc=仅传送程序改变/库选择消息到该装置链(未到设备的输出)
midi_program_change.chain_anti-click.desc=在发送程序更改/库选择消息之前下拉设备链的输出电平
midi_program_change.chain_decay.desc=启用所有“反点击”淡出的时间
midi_song_select.message.desc=歌曲选择消息 \n\n注意: 仅当音频引擎加载了项目，按下“立即发送”按钮或在启用“自动发送”选项的情况下更改了值时，才会发送歌曲选择消息


#note_fx.
arpeggiator.pitch_enable.desc=使用转置值来偏移各步骤
arpeggiator.global_velo.desc=速度缩放器适用于所有步骤
arpeggiator.global_length.desc=门限长度定标器适用于所有步骤
arpeggiator.pattern.desc=触发音符的顺序:
arpeggiator.octaves.desc=用于八度音的数目，从当前八度计数
arpeggiator.retrigger.desc=从第一步开始播放新音符
arpeggiator.time_mode.desc=启用后，在音符值中设置步长
arpeggiator.time_rate.desc=每个步骤的持续时间
arpeggiator.rate.desc=注意事项率区间(附音符类型):
arpeggiator.note_type.desc=用于设备速率的音符长度:
arpeggiator.groove.desc=应用传输器的凹槽（启用时）记录时间
arpeggiator.count.desc=使用的步骤数
arpeggiator.step_pitch.title=换位量[滑块]
arpeggiator.step_pitch.desc=每步音调为半音偏移
arpeggiator.step_velo.title=速度水平[滑块]
arpeggiator.step_velo.desc=每一步的速度百分比
arpeggiator.step_length.title=门限长度 [滑块]
arpeggiator.step_length.desc=每个步骤的闸门长度，以步骤持续时间的百分比表示(由基本速率和音符类型设置)
arpeggiator.leds.title=位置指示灯[显示]
arpeggiator.leds.desc=点亮当前步骤
arpeggiator.humanize.desc=速度和音符/步骤开始时间的相对随机量(允许较早和较晚的步骤)
arpeggiator.pressure_velo.desc=使用任何传入的多压力消息更新每个音符的速度，使速度动态(和MPE友好)
arpeggiator.overlapping.desc=允许音符重叠(总门限长度超过100 %)。禁用后，新笔记将停止所有旧笔记。
arpeggiator.start_on_note.desc=当第一个音符到达时触发输出。 否则，音符速率值将等待下一个拍子网格间隔。
arpeggiator.release_immediately.desc=释放最后一个音符时停止输出。 否则，最后一步将持续正常的速率时段。
arpeggiator.octave_handling.desc=如何处理其他八度音阶:
diatonic_transposer.root.desc=所用比例/模式的根音
diatonic_transposer.mode.desc=比例/模式
diatonic_transposer.shift.desc=半音偏移应用于传入的音符
diatonic_transposer.foreigners.desc=在音阶之外处理音符:
micro-pitch.root.desc=请注意在哪里开始音律并且不应用音高变化
micro-pitch.octave.desc=半音移应用于根音调以上八度的音符
micro-pitch.notes.title=音符 1 至 11 [0.00 to +24.00 st]
micro-pitch.notes.desc=半音移位适用于中间的11个音符 \n\n注意: 移位也可以分数形式输入。 例如，键入'3/2' 会将该值设置为'7.02 st'.
micro-pitch.a3.desc=频率偏移应用于整个音符范围，设置A3的为标准音 (传统上 '440 Hz')
micro-pitch.amount.desc=十二平均律('0 %')和所述一组值的完整应用程序之间的干/湿混合('100 %')
micro-pitch.visual.title=规模可视化[显示]
micro-pitch.visual.desc=显示所有的音符相对，在顶部(12 点). \n\n在传统的等温位置，音符用细线显示，随着调音的进一步扩大，该线会变粗。
micro-pitch.scala.title=注意: Scala文件支持
micro-pitch.scala.desc=Scala (SCL) files that describe either seven- or 12-note scales can be imported by dragging them onto the Micro-pitch device. \n\nIf the scale uses 12 notes, its values will be directly applied to all notes. Seven-note scales will import their values to the right column (the white notes from a C root) and use interpolated values for the other five notes.
multi-note.enable.desc=启用此音符单位
multi-note.pitch.desc=音调从输入音符偏移 ('0' 表示没有变化)
multi-note.velocity.desc=速度从输入音符偏移('0' 表示没有变化)
note_delay.offs.desc=注意音符消息是否延迟 \n\n注意: 当音符延迟不延迟时，在延迟时间之前释放的音符将不会发出声音。
note_echo.mute.desc=忽略传入音符信号
note_echo.mode.desc=启用后，可在16个音符中设置音符长度
note_echo.time.desc=基于时间的音符长度，在“以16分音符设置”模式开关关闭时使用
note_echo.beats.desc=用于音符长度的16分音符数量
note_echo.beat_offset.desc=将音符长度缩放为稍长(正值)或更短(负值)
note_echo.echos.desc=除非启用了无限重复，否则每个音符会用最大回声数
note_echo.infinity.desc=每个音符允许无限数量的回声
note_echo.velocity.desc=每个回声的固定起始速度
note_echo.mono.desc=仅重复最后一个传入的音符
note_echo.stop.desc=单击以抹掉所有音符和回声
note_echo.display.title=输出可视化
note_echo.display.desc=反映此设备的音符输出(包括原始音符及其回声)
note_echo.mode.desc=如何反馈参数(紫色)与笔记交互:
note_echo.feedback_time.desc=连续回声之间的时间变化
note_echo.feedback_time_random.desc=随机范围到连续回声之间的时间变化
note_echo.feedback_gate.desc=连续回声之间音符长度的变化
note_echo.feedback_velocity.desc=连续回声之间的偏移速度
note_echo.feedback_pitch.desc=连续回声之间的偏移音高 \n\n注意: 当原始音符的音高介于“反馈音高最小值和最大值”(如下所示)之间时，每个连续回声都会偏移此移调量。 如果回声序列达到最小/最大，则将其回绕到原始音高。
note_echo.feedback_pitch_min.desc=反馈移调的最小音高
note_echo.feedback_pitch_max.desc=反馈移调的最大音高
note_filter.low_note.desc=允许通过的最低音符
note_filter.high_note.desc=允许通过的最高音符
note_filter.low_velocity.desc=允许通过的最低速度
note_filter.high_velocity.desc=允许通过的最高速度
note_harmonizer.harmony_path.title=和声源
note_harmonizer.harmony_path.desc=传入音符信号的路径 \n\n将分析来自此源的所有活动音符的粗略键结构，然后将到达该设备的音符调整为合适的大小。
note_harmonizer.incoming_key.desc=设置此参数以匹配传入音符的键，有助于改善和声重塑
note_latch.mode.desc=使用中的闩锁行为:
note_latch.threshold.desc=速度阈值(处于“速度”模式时)。 上面的注释已被锁存。 下面的音符将被忽略或视为音符偏移(当该音调已被锁定时).
note_latch.mono.desc=只有保持在同一时间锁定一个音符 (最后一个音符优先)
note_latch.transport_stop.desc=完每当运输停止所有的闭锁/按住的音符
note_latch.kill.desc=单击时结束所有锁存/保留的音符
note_length.mode.desc=启用后，可在16分音符中设置音符长度
note_length.time.desc=基于时间的音符长度，在“以16分音符设置”模式开关关闭时使用
note_length.beats.desc=用于音符长度的16分音符数量
note_length.beat_offset.desc=将音符长度缩放为稍长(正值)或更短(负值)
note_length.trigger.desc=触发音符时:
note_length.velocity_fixed.desc=对所有音符使用设定的速度(而不是使用触发音符的速度)
note_length.velocity_level.desc=用于新音符的固定力度值
note_pitch_shifter.octave.desc=音高偏移量，以八度为单位(每个12个半音)
note_pitch_shifter.semitone.desc=半音的音高偏移量(通常为"st"或音乐半音阶)
note_pitch_shifter.fine.desc=Pitch shift amount in as a percentage of one semitone \n\nSome example settings: \n• '0.00 %' represents no shift \n• '+50.0 %' represents 50 cents up \n• '-66.7 %' represents two-thirds of the way down toward the semitone below
note_velocity.input_middle.desc=输入中间速度输出电平的输入速度电平
note_velocity.output_minimum.desc=收到输入的最小速度 ('1') 时的输出速度
note_velocity.output_middle.desc=当接收到中等速度输入电平的输入速度时的输出速度
note_velocity.output_maximum.desc=接收到最大速度('127')时的输出速度
note_velocity.random.desc=在定义的输出范围内应用随机变化(基于Lo, Mid & Hi设置)
note_velocity.display.title=图形界面
note_velocity.display.desc=Velocity curve with clickable circles for the Lo ("L"), Mid ("M"), and Hi ("H") output levels, all draggable up and down. The Mid ("M") level can also be moved from left to right, setting the input level at which this output level is used. \n\nMoving crosshairs show the latest note on's input velocity (horizontal position) and output velocity (vertical position).
transposition_map.key.desc=音级的根变换
transposition_map.shift.desc=在音调类转换之前，对输入音符进行半音偏移
transposition_map.octave.desc=如何选择每个音符的八度:
transposition_map.transform.title=变换网格[矩阵]
transposition_map.transform.desc=This 12x12 grid represents incoming pitch classes (from left to right) and the outgoing pitch class they are mapped to (up and down). Clicking in any vertical column will select the pitch class output for that incoming note.


#reverb.
reverb-device.mode.desc=为早期反射而模拟的空间类型
reverb-device.size.desc=为早期反射而模拟的空间的相对大小
reverb-device.predelay.desc=早期反射开始之前的时间
reverb-device.difussion.desc=早期反射的分布情况如何
reverb-device.buildup.desc=离散反射是如何分布顺滑
reverb-device.time.desc=混响的持续时间
reverb-device.late_mix.desc=整个后期部分的电平缩放器
reverb-device.low_freq.desc=低交叉频率
reverb-device.low_factor.desc=低频段的混响时间，相对于混响时间
reverb-device.high_freq.desc=高交叉频率
reverb-device.high_factor.desc=高频段的混响时间，相对于混响时间
reverb-device.tank_fx_chain.desc=用于在离散反射块中插入设备/插件的链
reverb-device.display.title=频谱显示
reverb-device.display.desc=Displays the outgoing audio spectrum, along with dots for controlling the Frequencies (left to right) and Factors (up and down) for both the L(ow) and H(igh) bands


#routing.
audio_receiver.gain.desc=应用于接收信号的增益
audio_receiver.mix.desc=设备输出处接收到的信号量(与干信号进入设备混合)
note_receiver.mute_input.desc=绕过到达设备的笔记
note_receiver.mute_source.desc=绕过通过音符源路径接收的音符


#synth.
fm-4.oscillator_enable.desc=激活三角振荡器
fm-4.oscillator_ratio.desc=Scales the oscillator's pitch, relative to the incoming note pitch signal \n\nNote: To work in whole numbers (harmonics), click to the left of the decimal and drag.
fm-4.oscillator_frequency_offset.desc=改变振荡器的频率
fm-4.oscillator_modulation.desc=定标器用于从该振荡器的所有调制信号
fm-4.noise_enable.desc=激活噪声发生器单元
fm-4.noise_cutoff.desc=噪声发生器单元的12 dB/oct低通滤波器的截止频率
fm-4.noise_reso.desc=噪声发生器单元的12 dB/oct低通滤波器的谐振
fm-4.noise_drive.desc=驱动器应用，后置过滤器
fm-4.noise_modulation.desc=定标器用于从该噪声发生器单元中的所有的调制信号
fm-4.mix_level.desc=此元素的量发送到混音母线
fm-4.matrix.title=调制矩阵
fm-4.matrix.desc=频率调制量表。 \n\n信号源以垂直行显示，在顶部用数字和噪声 ("N") 发生器单元标记振荡器. \n\n目的地以水平行显示，四个振荡器作为可能的目标. \n\n请注意，所有值均按源单位的"Mod" (和启用)值进行缩放。
phase-4.osc_enable.desc=激活振荡器
phase-4.osc_phase.desc=抵消了振荡器的相位，并影响如何整形(相位失真)应用
phase-4.osc_algo.desc=确定源波形，它会遍历为形状的路径进行调整:
phase-4.osc_formant.title=共振峰 [harmonic 1 (fundamental) to 9]
phase-4.osc_formant.desc=谐波作为波形中的附加正弦周期插入
phase-4.osc_ratio.title=Pitch Ratio [0 to 99 : 1 to 99]
phase-4.osc_ratio.desc=Scales the oscillator's pitch as a numerator:denominator pair \n\nSome example settings: \n• '1:1' represents no change. \n• '6:1' multiplies by six (600%). \n• '1:4' scales down to 25% (or two octaves down). \n• '4:3' scales to about 133% (or up a perfect fourth in just intonation). \n• '0:x' zeroes out the pitch buss, leaving only the Frequency Offset and incoming modulation signals in control.
phase-4.osc_kbt.desc=将传入音符的音高添加到振荡器的音高总线上
phase-4.osc_freq.desc=禁用键盘跟踪时的振荡器调整
phase-4.osc_pitch_offset.desc=改变振荡器的音高
phase-4.osc_stereo.desc=应用逆频率偏移到右声道
phase-4.osc_freq_offset.desc=改变振荡器的频率
phase-4.osc_shape.desc=施加的相位失真量。 也可以认为是当前算法内的相对位置。
phase-4.osc_order.desc=启用后，将在相位失真之前应用相位调制
phase-4.osc_mod.desc=全局相位调制量，缩放所有振荡器源
phase-4.osc_r_mod.desc=Relative depth of phase modulation from the R(ed) oscillator to this one
phase-4.osc_y_mod.desc=Relative depth of phase modulation from the Y(ellow) oscillator to this one
phase-4.osc_b_mod.desc=Relative depth of phase modulation from the B(lue) oscillator to this one
phase-4.osc_m_mod.desc=Relative depth of phase modulation from the M(agenta) oscillator to this one
phase-4.osc_volume.desc=进入音频总线的该振荡器的电平
phase-4.filter_feedback.desc=从滤波器输出反馈回输入的反馈
phase-4.filter_drive.desc=前置放大器的增益量
phase-4.filter_r_mod.desc=Depth of filter frequency modulation from the R(ed) oscillator to this one
phase-4.filter_y_mod.desc=Depth of filter frequency modulation from the Y(ellow) oscillator to this one
phase-4.filter_b_mod.desc=Depth of filter frequency modulation from the B(lue) oscillator to this one
phase-4.filter_m_mod.desc=Depth of filter frequency modulation from the M(agenta) oscillator to this one
phase-4.global_shape.desc=应用于所有振荡器的相对整形量
phase-4.global_mod.desc=应用于所有振荡器的相对相位调制量
phase-4.global_xy.title=Global XY Pad [interface]
phase-4.global_xy.desc=The "4" ball controls the global Shape and Mod parameters on the x- and y-axes. \n\nWhen individual oscillators have their own Shape and Mod parameters set below maximum, corresponding color balls will appear as well.
polysynth.osc_pitch.desc=改变振荡器的音高
polysynth.osc_shape.desc=Blending between a main sawtooth at pitch ('50 %'), and either a pulse wave up an octave ('0 %') or a pulse width-controlled sawtooth up an octave ('100 %')
polysynth.osc_sub.desc=Blend between the primary waves ('0 %') and a pulse wave down an octave ('100 %')
polysynth.osc_sync.desc=半音偏移为(无声的)主同步振荡器，产生音色移
polysynth.osc_spread.desc=双极宽度用于所有统一声音分散
polysynth.osc_width.desc=此振荡器中一致声音的立体声宽度
polysynth.osc_oct.desc=Octave offset in organ foot notation, where 8' reflects no change, 16' is down an octave, etc.
polysynth.osc_pw.desc=Width control for the secondary sawtooth and pulse waves (when Shape is away from '50 %'). Also acts as a phase offset for the sub pulse wave.
polysynth.osc_sub_pw.desc=副脉波的宽度控制
polysynth.osc_retrig.desc=从每个音符触发的零阶段重新开始
polysynth.osc_voices.desc=每个音符触发的声音数
polysynth.osc_pan.desc=立体声平移位置
polysynth.mix_blend.desc=振荡器如何组合:
polysynth.mix_mix.desc=振荡器1和2之间的混合位置
polysynth.mix_noise.desc=Blend between the oscillators ('0 %') and a white noise generator ('100 %')
polysynth.mix_filt_fm.desc=Amount of filter frequency modulation from the (likely audio rate) Mix section
polysynth.mix_hpf.desc=高通滤波器组件的截止频率
polysynth.mix_hpf_mode.desc=高通滤波器组件的模式:
polysynth.mix_hpf_reso.desc=高通滤波器组件的谐振
polysynth.mix_drive.desc=在滤波器部分之前应用的增益
polysynth.mix_feedback.desc=在过滤器部分之前应用了反馈
polysynth.filter_shaper.desc=整形的施用量，后置过滤器
polysynth.filter_shaper_mode.desc=成型方法:
sampler.env_mode.desc=使用的幅度包络类型:
sampler.env_fade-in.desc=从静音(在采样开始点)到全振幅的斜坡时间
sampler.env_fade-out.desc=从全振幅到静音的上升时间(在采样终点) 
sampler.zparams_modulators.title=区域参数1、2和3
sampler.zparams_modulators.desc=[多样本模式]当前触发区域的参数值的调制器源

#the_grid.
the_grid.timebase.desc=单位用于率
the_grid.length.desc=设备时相信号的波长，当前时基
the_grid.offset.desc=以时基为单位的定时偏移，以使输出提前(正)或后(负)移位
the_grid.shuffle.desc=将传输器的凹槽（启用时）应用于设备相位信号
the_grid.free-run.desc=不管运输状态如何，都继续运行
the_grid.jellybeans.title=网格概览显示
the_grid.jellybeans.desc=当前加载的网格补丁的摘要视图和可单击的导航。 接口模块(如显示器和音序器)以黑色显示； 所有其他模块以其设置的颜色显示。 在显示屏上单击一次以打开“网格编辑器”窗口，或单击两次将其关闭。 当前显示的区域以蓝色视口为边界，可以单击并拖动它以更改网格编辑器的焦点。

fx_grid.note_path.title=音符来源
fx_grid.note_path.desc=传入音符信号的路径
#poly_grid


#utility.
dc_offset.dc.desc=添加到输入信号中的值 \n\n注意: 如果在音频信号路径中使用该设备，则该设备可能会对发送到相同音频总线(甚至来自不同应用程序)的任何音频信号产生明显影响。 因此，请谨慎使用此设备。
dual_pan.left.desc=平移应用于原始左信号
dual_pan.right.desc=平移应用于原始右信号
dual_pan.law.title=平移法[等于增益或混合]
dual_pan.law.desc=平移是使用等增益还是更平滑的混合方程式完成
test_tone.freq.desc=正弦波频率
test_tone.gain.desc=正弦波的电平
time_shift.ms.desc=移位时间量，正值会延迟输入信号，而负值会使输入时间更早
time_shift.samples.desc=移位时间量，正值会延迟输入信号，而负值会使输入时间更早
time_shift.mode.title=单位[毫秒或样本]
time_shift.mode.desc=平移时间使用的单位
tool.left-.desc=反转左声道
tool.right-.desc=反转正确的频道
tool.swap.desc=交换左右声道(在所有其他设置之后应用)
tool.amp.desc=增益应用
tool.pan.desc=输出的立体声声像位置
tool.width.desc=输入信号的相对宽度('100 %'表示不变)
